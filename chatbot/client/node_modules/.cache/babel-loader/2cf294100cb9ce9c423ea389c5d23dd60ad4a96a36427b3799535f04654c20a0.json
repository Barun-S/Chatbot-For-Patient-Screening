{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barun\\\\OneDrive\\\\Documents\\\\btp\\\\chatbot\\\\client\\\\src\\\\flowtree.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './flowtree.css';\nconst API_URL = \"http://localhost:5001/fetchalldata\";\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faFolder, faFolderOpen } from \"@fortawesome/free-solid-svg-icons\";\n// // import \"./TreeNode.css\";\n\n// function TreeNode({ data }) {\n//   const [isOpen, setIsOpen] = useState(false);\n\n//   const toggle = () => {\n//     setIsOpen(!isOpen);\n//   };\n\n//   const hasChildren = data.children && data.children.length > 0;\n\n//   return (\n//     <li className=\"tree-node\">\n//       <div className=\"tree-node__content\">\n//         {hasChildren && (\n//           <FontAwesomeIcon\n//             icon={isOpen ? faFolderOpen : faFolder}\n//             className=\"tree-node__toggle\"\n//             onClick={toggle}\n//           />\n//         )}\n//         <span className=\"tree-node__label\">{data.name}</span>\n//         {data.value && (\n//           <span className=\"tree-node__value\">({data.value})</span>\n//         )}\n//       </div>\n//       {hasChildren && isOpen && (\n//         <ul className=\"tree-node__children\">\n//           {data.children.map((child) => (\n//             <TreeNode key={child.name} data={child} />\n//           ))}\n//         </ul>\n//       )}\n//     </li>\n//   );\n// }\n\n// export default TreeNode;\n\nimport React, { useEffect, useState } from \"react\";\nimport TreeNode from \"./TreeNode\";\nimport \"./TreeView.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TreeView(_ref) {\n  _s();\n  let {\n    apiUrl\n  } = _ref;\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(apiUrl);\n      const jsonData = await response.json();\n      setData([jsonData]);\n    };\n    fetchData();\n  }, [apiUrl]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"tree-view\",\n    children: data.map(item => /*#__PURE__*/_jsxDEV(TreeNode, {\n      data: item\n    }, item.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(TreeView, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = TreeView;\nexport default TreeView;\nvar _c;\n$RefreshReg$(_c, \"TreeView\");","map":{"version":3,"names":["API_URL","React","useEffect","useState","TreeNode","TreeView","apiUrl","data","setData","fetchData","response","fetch","jsonData","json","map","item","name"],"sources":["C:/Users/barun/OneDrive/Documents/btp/chatbot/client/src/flowtree.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './flowtree.css';\r\nconst API_URL = \"http://localhost:5001/fetchalldata\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faFolder, faFolderOpen } from \"@fortawesome/free-solid-svg-icons\";\r\n// // import \"./TreeNode.css\";\r\n\r\n// function TreeNode({ data }) {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n\r\n//   const toggle = () => {\r\n//     setIsOpen(!isOpen);\r\n//   };\r\n\r\n//   const hasChildren = data.children && data.children.length > 0;\r\n\r\n//   return (\r\n//     <li className=\"tree-node\">\r\n//       <div className=\"tree-node__content\">\r\n//         {hasChildren && (\r\n//           <FontAwesomeIcon\r\n//             icon={isOpen ? faFolderOpen : faFolder}\r\n//             className=\"tree-node__toggle\"\r\n//             onClick={toggle}\r\n//           />\r\n//         )}\r\n//         <span className=\"tree-node__label\">{data.name}</span>\r\n//         {data.value && (\r\n//           <span className=\"tree-node__value\">({data.value})</span>\r\n//         )}\r\n//       </div>\r\n//       {hasChildren && isOpen && (\r\n//         <ul className=\"tree-node__children\">\r\n//           {data.children.map((child) => (\r\n//             <TreeNode key={child.name} data={child} />\r\n//           ))}\r\n//         </ul>\r\n//       )}\r\n//     </li>\r\n//   );\r\n// }\r\n\r\n// export default TreeNode;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport TreeNode from \"./TreeNode\";\r\nimport \"./TreeView.css\";\r\n\r\nfunction TreeView({ apiUrl }) {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(apiUrl);\r\n      const jsonData = await response.json();\r\n      setData([jsonData]);\r\n    };\r\n\r\n    fetchData();\r\n  }, [apiUrl]);\r\n\r\n  return (\r\n    <ul className=\"tree-view\">\r\n      {data.map((item) => (\r\n        <TreeNode key={item.name} data={item} />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default TreeView;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA,MAAMA,OAAO,GAAG,oCAAoC;;AAEpD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,gBAAgB;AAAC;AAExB,SAASC,QAAQ,OAAa;EAAA;EAAA,IAAZ;IAAEC;EAAO,CAAC;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,MAAMO,SAAS,GAAG,YAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,MAAM,CAAC;MACpC,MAAMM,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MACtCL,OAAO,CAAC,CAACI,QAAQ,CAAC,CAAC;IACrB,CAAC;IAEDH,SAAS,EAAE;EACb,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAEZ,oBACE;IAAI,SAAS,EAAC,WAAW;IAAA,UACtBC,IAAI,CAACO,GAAG,CAAEC,IAAI,iBACb,QAAC,QAAQ;MAAiB,IAAI,EAAEA;IAAK,GAAtBA,IAAI,CAACC,IAAI;MAAA;MAAA;MAAA;IAAA,QACzB;EAAC;IAAA;IAAA;IAAA;EAAA,QACC;AAET;AAAC,GApBQX,QAAQ;AAAA,KAARA,QAAQ;AAsBjB,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}