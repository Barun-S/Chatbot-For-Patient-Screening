{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barun\\\\OneDrive\\\\Documents\\\\btp\\\\chatbot\\\\client\\\\src\\\\flowtree.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './flowtree.css';\n// const API_URL = \"http://localhost:5001/fetchalldata\";\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faFolder, faFolderOpen } from \"@fortawesome/free-solid-svg-icons\";\n// // import \"./TreeNode.css\";\n\n// function TreeNode({ data }) {\n//   const [isOpen, setIsOpen] = useState(false);\n\n//   const toggle = () => {\n//     setIsOpen(!isOpen);\n//   };\n\n//   const hasChildren = data.children && data.children.length > 0;\n\n//   return (\n//     <li className=\"tree-node\">\n//       <div className=\"tree-node__content\">\n//         {hasChildren && (\n//           <FontAwesomeIcon\n//             icon={isOpen ? faFolderOpen : faFolder}\n//             className=\"tree-node__toggle\"\n//             onClick={toggle}\n//           />\n//         )}\n//         <span className=\"tree-node__label\">{data.name}</span>\n//         {data.value && (\n//           <span className=\"tree-node__value\">({data.value})</span>\n//         )}\n//       </div>\n//       {hasChildren && isOpen && (\n//         <ul className=\"tree-node__children\">\n//           {data.children.map((child) => (\n//             <TreeNode key={child.name} data={child} />\n//           ))}\n//         </ul>\n//       )}\n//     </li>\n//   );\n// }\n\n// export default TreeNode;\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport \"./flowtree.css\";\n\n// function TreeNode({ data }) {\n//   const [collapsed, setCollapsed] = useState(false);\n\n//   const handleClick = () => {\n//     setCollapsed(!collapsed);\n//   };\n\n//   const handleMinimizeClick = (e) => {\n//     e.stopPropagation();\n//     setCollapsed(true);\n//   };\n\n//   const renderChild = (child) => {\n//     if (typeof child === \"object\") {\n//       return <TreeNode key={child.name} data={child} />;\n//     } else {\n//       return <span className=\"tree-node__value\">\"{child}\"</span>;\n//     }\n//   };\n\n//   const isObjectEmpty = (obj) => {\n//     return Object.keys(obj).length === 0;\n//   };\n\n//   return (\n//     <li>\n//       <div className=\"tree-node__content\" onClick={handleClick}>\n//         <span className=\"tree-node__toggle\">\n//           {isObjectEmpty(data) ? \"\" : collapsed ? \"+\" : \"-\"}\n//         </span>\n//         <span className=\"tree-node__label\">{data.name}</span>\n//         {Object.values(data)\n//           .filter((value) => typeof value !== \"object\")\n//           .map((value) => renderChild(value))}\n//         {isObjectEmpty(data) && <span className=\"tree-node__value\">{\"{}\"}</span>}\n//         {!isObjectEmpty(data) && collapsed && (\n//           <button\n//             className=\"tree-node__minimize\"\n//             onClick={handleMinimizeClick}\n//           >\n//             Minimize\n//           </button>\n//         )}\n//       </div>\n//       {!isObjectEmpty(data) && (\n//         <ul\n//           className={`tree-node__children ${\n//             collapsed ? \"tree-node__children--collapsed\" : \"\"\n//           }`}\n//         >\n//           {Object.values(data)\n//             .filter((value) => typeof value === \"object\")\n//             .map((child) => (\n//               <TreeNode key={child.name} data={child} />\n//             ))}\n//         </ul>\n//       )}\n//     </li>\n//   );\n// }\n\n// function TreeView({ apiUrl }) {\n//   const [data, setData] = useState([]);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const response = await fetch(apiUrl);\n//       const jsonData = await response.json();\n//       setData([jsonData]);\n//       console.log(jsonData);\n//     };\n\n//     fetchData();\n//   }, [apiUrl]);\n\n//   return (\n//     <ul className=\"tree-view\">\n//       {data.map((item) => (\n//         <TreeNode key={item.name} data={item} />\n//       ))}\n//     </ul>\n//   );\n// }\n\n// export default TreeView;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TreeNode(_ref) {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [collapsed, setCollapsed] = useState(true);\n  if (typeof data === 'string') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leaf\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"key\",\n        children: [\"\\\"\", data, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this);\n  }\n  const keys = Object.keys(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toggle\",\n      onClick: () => setCollapsed(!collapsed),\n      children: collapsed ? '+' : '-'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"key\",\n      children: '{'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), !collapsed && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"branch\",\n      children: keys.map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"branch-item\",\n        children: [/*#__PURE__*/_jsxDEV(TreeNode, {\n          data: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"separator\",\n          children: \": \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TreeNode, {\n          data: data[key]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"separator\",\n          children: ','\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"key\",\n      children: '}'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n_s(TreeNode, \"v9q8u3mX6e8FrJZVev9WfYlHYUo=\");\n_c = TreeNode;\nfunction TreeView() {\n  _s2();\n  const [jsonData, setJsonData] = useState({});\n  useEffect(() => {\n    axios.get('https://jsonplaceholder.typicode.com/posts/1').then(response => setJsonData(response.data)).catch(error => console.log(error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(TreeNode, {\n      data: jsonData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n_s2(TreeView, \"hdEqB9jCpKbc/mbN0kK7WbAl3+o=\");\n_c2 = TreeView;\nexport default TreeView;\nvar _c, _c2;\n$RefreshReg$(_c, \"TreeNode\");\n$RefreshReg$(_c2, \"TreeView\");","map":{"version":3,"names":["React","useEffect","useState","axios","TreeNode","data","collapsed","setCollapsed","keys","Object","map","key","TreeView","jsonData","setJsonData","get","then","response","catch","error","console","log"],"sources":["C:/Users/barun/OneDrive/Documents/btp/chatbot/client/src/flowtree.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './flowtree.css';\r\n// const API_URL = \"http://localhost:5001/fetchalldata\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faFolder, faFolderOpen } from \"@fortawesome/free-solid-svg-icons\";\r\n// // import \"./TreeNode.css\";\r\n\r\n// function TreeNode({ data }) {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n\r\n//   const toggle = () => {\r\n//     setIsOpen(!isOpen);\r\n//   };\r\n\r\n//   const hasChildren = data.children && data.children.length > 0;\r\n\r\n//   return (\r\n//     <li className=\"tree-node\">\r\n//       <div className=\"tree-node__content\">\r\n//         {hasChildren && (\r\n//           <FontAwesomeIcon\r\n//             icon={isOpen ? faFolderOpen : faFolder}\r\n//             className=\"tree-node__toggle\"\r\n//             onClick={toggle}\r\n//           />\r\n//         )}\r\n//         <span className=\"tree-node__label\">{data.name}</span>\r\n//         {data.value && (\r\n//           <span className=\"tree-node__value\">({data.value})</span>\r\n//         )}\r\n//       </div>\r\n//       {hasChildren && isOpen && (\r\n//         <ul className=\"tree-node__children\">\r\n//           {data.children.map((child) => (\r\n//             <TreeNode key={child.name} data={child} />\r\n//           ))}\r\n//         </ul>\r\n//       )}\r\n//     </li>\r\n//   );\r\n// }\r\n\r\n// export default TreeNode;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\nimport \"./flowtree.css\";\r\n\r\n// function TreeNode({ data }) {\r\n//   const [collapsed, setCollapsed] = useState(false);\r\n\r\n//   const handleClick = () => {\r\n//     setCollapsed(!collapsed);\r\n//   };\r\n\r\n//   const handleMinimizeClick = (e) => {\r\n//     e.stopPropagation();\r\n//     setCollapsed(true);\r\n//   };\r\n\r\n//   const renderChild = (child) => {\r\n//     if (typeof child === \"object\") {\r\n//       return <TreeNode key={child.name} data={child} />;\r\n//     } else {\r\n//       return <span className=\"tree-node__value\">\"{child}\"</span>;\r\n//     }\r\n//   };\r\n\r\n//   const isObjectEmpty = (obj) => {\r\n//     return Object.keys(obj).length === 0;\r\n//   };\r\n\r\n//   return (\r\n//     <li>\r\n//       <div className=\"tree-node__content\" onClick={handleClick}>\r\n//         <span className=\"tree-node__toggle\">\r\n//           {isObjectEmpty(data) ? \"\" : collapsed ? \"+\" : \"-\"}\r\n//         </span>\r\n//         <span className=\"tree-node__label\">{data.name}</span>\r\n//         {Object.values(data)\r\n//           .filter((value) => typeof value !== \"object\")\r\n//           .map((value) => renderChild(value))}\r\n//         {isObjectEmpty(data) && <span className=\"tree-node__value\">{\"{}\"}</span>}\r\n//         {!isObjectEmpty(data) && collapsed && (\r\n//           <button\r\n//             className=\"tree-node__minimize\"\r\n//             onClick={handleMinimizeClick}\r\n//           >\r\n//             Minimize\r\n//           </button>\r\n//         )}\r\n//       </div>\r\n//       {!isObjectEmpty(data) && (\r\n//         <ul\r\n//           className={`tree-node__children ${\r\n//             collapsed ? \"tree-node__children--collapsed\" : \"\"\r\n//           }`}\r\n//         >\r\n//           {Object.values(data)\r\n//             .filter((value) => typeof value === \"object\")\r\n//             .map((child) => (\r\n//               <TreeNode key={child.name} data={child} />\r\n//             ))}\r\n//         </ul>\r\n//       )}\r\n//     </li>\r\n//   );\r\n// }\r\n\r\n// function TreeView({ apiUrl }) {\r\n//   const [data, setData] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       const response = await fetch(apiUrl);\r\n//       const jsonData = await response.json();\r\n//       setData([jsonData]);\r\n//       console.log(jsonData);\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, [apiUrl]);\r\n\r\n//   return (\r\n//     <ul className=\"tree-view\">\r\n//       {data.map((item) => (\r\n//         <TreeNode key={item.name} data={item} />\r\n//       ))}\r\n//     </ul>\r\n//   );\r\n// }\r\n\r\n// export default TreeView;\r\n\r\n\r\n\r\n\r\n\r\nfunction TreeNode({ data }) {\r\n  const [collapsed, setCollapsed] = useState(true);\r\n\r\n  if (typeof data === 'string') {\r\n    return (\r\n      <div className=\"leaf\">\r\n        <span className=\"key\">\"{data}\"</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const keys = Object.keys(data);\r\n\r\n  return (\r\n    <div className=\"node\">\r\n      <div className=\"toggle\" onClick={() => setCollapsed(!collapsed)}>\r\n        {collapsed ? '+' : '-'}\r\n      </div>\r\n      <span className=\"key\">{'{'}</span>\r\n      {!collapsed && (\r\n        <div className=\"branch\">\r\n          {keys.map((key) => (\r\n            <div key={key} className=\"branch-item\">\r\n              <TreeNode data={key} />\r\n              <span className=\"separator\">: </span>\r\n              <TreeNode data={data[key]} />\r\n              <span className=\"separator\">{','}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n      <span className=\"key\">{'}'}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TreeView() {\r\n  const [jsonData, setJsonData] = useState({});\r\n\r\n  useEffect(() => {\r\n    axios.get('https://jsonplaceholder.typicode.com/posts/1')\r\n      .then(response => setJsonData(response.data))\r\n      .catch(error => console.log(error));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <TreeNode data={jsonData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TreeView;\r\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,gBAAgB;;AAEvB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAMA,SAASC,QAAQ,OAAW;EAAA;EAAA,IAAV;IAAEC;EAAK,CAAC;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAEhD,IAAI,OAAOG,IAAI,KAAK,QAAQ,EAAE;IAC5B,oBACE;MAAK,SAAS,EAAC,MAAM;MAAA,uBACnB;QAAM,SAAS,EAAC,KAAK;QAAA,WAAC,IAAC,EAACA,IAAI,EAAC,IAAC;MAAA;QAAA;QAAA;QAAA;MAAA;IAAO;MAAA;MAAA;MAAA;IAAA,QACjC;EAEV;EAEA,MAAMG,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACH,IAAI,CAAC;EAE9B,oBACE;IAAK,SAAS,EAAC,MAAM;IAAA,wBACnB;MAAK,SAAS,EAAC,QAAQ;MAAC,OAAO,EAAE,MAAME,YAAY,CAAC,CAACD,SAAS,CAAE;MAAA,UAC7DA,SAAS,GAAG,GAAG,GAAG;IAAG;MAAA;MAAA;MAAA;IAAA,QAClB,eACN;MAAM,SAAS,EAAC,KAAK;MAAA,UAAE;IAAG;MAAA;MAAA;MAAA;IAAA,QAAQ,EACjC,CAACA,SAAS,iBACT;MAAK,SAAS,EAAC,QAAQ;MAAA,UACpBE,IAAI,CAACE,GAAG,CAAEC,GAAG,iBACZ;QAAe,SAAS,EAAC,aAAa;QAAA,wBACpC,QAAC,QAAQ;UAAC,IAAI,EAAEA;QAAI;UAAA;UAAA;UAAA;QAAA,QAAG,eACvB;UAAM,SAAS,EAAC,WAAW;UAAA,UAAC;QAAE;UAAA;UAAA;UAAA;QAAA,QAAO,eACrC,QAAC,QAAQ;UAAC,IAAI,EAAEN,IAAI,CAACM,GAAG;QAAE;UAAA;UAAA;UAAA;QAAA,QAAG,eAC7B;UAAM,SAAS,EAAC,WAAW;UAAA,UAAE;QAAG;UAAA;UAAA;UAAA;QAAA,QAAQ;MAAA,GAJhCA,GAAG;QAAA;QAAA;QAAA;MAAA,QAMd;IAAC;MAAA;MAAA;MAAA;IAAA,QAEL,eACD;MAAM,SAAS,EAAC,KAAK;MAAA,UAAE;IAAG;MAAA;MAAA;MAAA;IAAA,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QAC9B;AAEV;AAAC,GAlCQP,QAAQ;AAAA,KAARA,QAAQ;AAoCjB,SAASQ,QAAQ,GAAG;EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACdE,KAAK,CAACY,GAAG,CAAC,8CAA8C,CAAC,CACtDC,IAAI,CAACC,QAAQ,IAAIH,WAAW,CAACG,QAAQ,CAACZ,IAAI,CAAC,CAAC,CAC5Ca,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAK,SAAS,EAAC,WAAW;IAAA,uBACxB,QAAC,QAAQ;MAAC,IAAI,EAAEN;IAAS;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACxB;AAEV;AAAC,IAdQD,QAAQ;AAAA,MAARA,QAAQ;AAgBjB,eAAeA,QAAQ;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}