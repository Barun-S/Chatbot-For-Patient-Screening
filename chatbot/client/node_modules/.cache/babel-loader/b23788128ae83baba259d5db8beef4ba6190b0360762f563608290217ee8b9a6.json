{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkForGraphConfigChanges = checkForGraphConfigChanges;\nexports.checkForGraphElementsChanges = checkForGraphElementsChanges;\nexports.getCenterAndZoomTransformation = getCenterAndZoomTransformation;\nexports.getId = getId;\nexports.initializeGraphState = initializeGraphState;\nexports.updateNodeHighlightedValue = updateNodeHighlightedValue;\nexports.getNormalizedNodeCoordinates = getNormalizedNodeCoordinates;\nexports.initializeNodes = initializeNodes;\nvar _d3Force = require(\"d3-force\");\nvar _d3Selection = require(\"d3-selection\");\nvar _d3Zoom = require(\"d3-zoom\");\nvar _graph2 = _interopRequireDefault(require(\"./graph.const\"));\nvar _graph3 = _interopRequireDefault(require(\"./graph.config\"));\nvar _err = _interopRequireDefault(require(\"../../err\"));\nvar _utils = require(\"../../utils\");\nvar _collapse = require(\"./collapse.helper\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar NODE_PROPS_WHITELIST = [\"id\", \"highlighted\", \"x\", \"y\", \"index\", \"vy\", \"vx\"];\nvar LINK_PROPS_WHITELIST = [\"index\", \"source\", \"target\", \"isHidden\"];\n/**\n * Create d3 forceSimulation to be applied on the graph.<br/>\n * {@link https://github.com/d3/d3-force#forceSimulation|d3-force#forceSimulation}<br/>\n * {@link https://github.com/d3/d3-force#simulation_force|d3-force#simulation_force}<br/>\n * Wtf is a force? {@link https://github.com/d3/d3-force#forces| here}\n * @param  {number} width - the width of the container area of the graph.\n * @param  {number} height - the height of the container area of the graph.\n * @param  {number} gravity - the force strength applied to the graph.\n * @returns {Object} returns the simulation instance to be consumed.\n * @memberof Graph/helper\n */\n\nfunction _createForceSimulation(width, height, gravity) {\n  var frx = (0, _d3Force.forceX)(width / 2).strength(_graph2[\"default\"].FORCE_X);\n  var fry = (0, _d3Force.forceY)(height / 2).strength(_graph2[\"default\"].FORCE_Y);\n  var forceStrength = gravity;\n  return (0, _d3Force.forceSimulation)().force(\"charge\", (0, _d3Force.forceManyBody)().strength(forceStrength)).force(\"x\", frx).force(\"y\", fry);\n}\n/**\n * Receives a matrix of the graph with the links source and target as concrete node instances and it transforms it\n * in a lightweight matrix containing only links with source and target being strings representative of some node id\n * and the respective link value (if non existent will default to 1).\n * @param  {Array.<Link>} graphLinks - an array of all graph links.\n * @param  {Object} config - the graph config.\n * @returns {Object.<string, Object>} an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @memberof Graph/helper\n */\n\nfunction _initializeLinks(graphLinks, config) {\n  return graphLinks.reduce(function (links, l) {\n    var source = getId(l.source);\n    var target = getId(l.target);\n    if (!links[source]) {\n      links[source] = {};\n    }\n    if (!links[target]) {\n      links[target] = {};\n    }\n    var value = config.collapsible && l.isHidden ? 0 : l.value || 1;\n    links[source][target] = value;\n    if (!config.directed) {\n      links[target][source] = value;\n    }\n    return links;\n  }, {});\n}\n/**\n * Method that initialize graph nodes provided by rd3g consumer and adds additional default mandatory properties\n * that are optional for the user. Also it generates an index mapping, this maps nodes ids the their index in the array\n * of nodes. This is needed because d3 callbacks such as node click and link click return the index of the node.\n * @param  {Array.<Node>} graphNodes - the array of nodes provided by the rd3g consumer.\n * @returns {Object.<string, Object>} returns the nodes ready to be used within rd3g with additional properties such as x, y\n * and highlighted values.\n * @memberof Graph/helper\n */\n\nfunction initializeNodes(graphNodes) {\n  var nodes = {};\n  var n = graphNodes.length;\n  for (var i = 0; i < n; i++) {\n    var node = graphNodes[i];\n    node.highlighted = false; // if an fx (forced x) is given, we want to use that\n\n    if (Object.prototype.hasOwnProperty.call(node, \"fx\")) {\n      node.x = node.fx;\n    } else if (!Object.prototype.hasOwnProperty.call(node, \"x\")) {\n      node.x = 0;\n    } // if an fy (forced y) is given, we want to use that\n\n    if (Object.prototype.hasOwnProperty.call(node, \"fy\")) {\n      node.y = node.fy;\n    } else if (!Object.prototype.hasOwnProperty.call(node, \"y\")) {\n      node.y = 0;\n    }\n    nodes[node.id.toString()] = node;\n  }\n  return nodes;\n}\n/**\n * Maps an input link (with format `{ source: 'sourceId', target: 'targetId' }`) to a d3Link\n * (with format `{ source: { id: 'sourceId' }, target: { id: 'targetId' } }`). If d3Link with\n * given index exists already that same d3Link is returned.\n * @param {Object} link - input link.\n * @param {number} index - index of the input link.\n * @param {Array.<Object>} d3Links - all d3Links.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a d3Link.\n * @memberof Graph/helper\n */\n\nfunction _mergeDataLinkWithD3Link(link, index) {\n  var d3Links = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var config = arguments.length > 3 ? arguments[3] : undefined;\n  var state = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  // find the matching link if it exists\n  var tmp = d3Links.find(function (l) {\n    return l.source.id === link.source && l.target.id === link.target;\n  });\n  var d3Link = tmp && (0, _utils.pick)(tmp, LINK_PROPS_WHITELIST);\n  var customProps = (0, _utils.antiPick)(link, [\"source\", \"target\"]);\n  if (d3Link) {\n    var toggledDirected = state.config && Object.prototype.hasOwnProperty.call(state.config, \"directed\") && config.directed !== state.config.directed;\n    var refinedD3Link = _objectSpread({\n      index: index\n    }, d3Link, {}, customProps); // every time we toggle directed config all links should be visible again\n\n    if (toggledDirected) {\n      return _objectSpread({}, refinedD3Link, {\n        isHidden: false\n      });\n    } // every time we disable collapsible (collapsible is false) all links should be visible again\n\n    return config.collapsible ? refinedD3Link : _objectSpread({}, refinedD3Link, {\n      isHidden: false\n    });\n  }\n  var highlighted = false;\n  var source = {\n    id: link.source,\n    highlighted: highlighted\n  };\n  var target = {\n    id: link.target,\n    highlighted: highlighted\n  };\n  return _objectSpread({\n    index: index,\n    source: source,\n    target: target\n  }, customProps);\n}\n/**\n * Tags orphan nodes with a `_orphan` flag.\n * @param {Object.<string, Object>} nodes - nodes mapped by their id.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @returns {Object.<string, Object>} same input nodes structure with tagged orphans nodes where applicable.\n * @memberof Graph/helper\n */\n\nfunction _tagOrphanNodes(nodes, linksMatrix) {\n  return Object.keys(nodes).reduce(function (acc, nodeId) {\n    var _computeNodeDegree = (0, _collapse.computeNodeDegree)(nodeId, linksMatrix),\n      inDegree = _computeNodeDegree.inDegree,\n      outDegree = _computeNodeDegree.outDegree;\n    var node = nodes[nodeId];\n    var taggedNode = inDegree === 0 && outDegree === 0 ? _objectSpread({}, node, {\n      _orphan: true\n    }) : node;\n    acc[nodeId] = taggedNode;\n    return acc;\n  }, {});\n}\n/**\n * Some integrity validations on links and nodes structure. If some validation fails the function will\n * throw an error.\n * @param  {Object} data - Same as {@link #initializeGraphState|data in initializeGraphState}.\n * @throws can throw the following error or warning msg:\n * INSUFFICIENT_DATA - msg if no nodes are provided\n * INVALID_LINKS - if links point to nonexistent nodes\n * INSUFFICIENT_LINKS - if no links are provided (not even empty Array)\n * @returns {undefined}\n * @memberof Graph/helper\n */\n\nfunction _validateGraphData(data) {\n  if (!data.nodes || !data.nodes.length) {\n    (0, _utils.logWarning)(\"Graph\", _err[\"default\"].INSUFFICIENT_DATA);\n    data.nodes = [];\n  }\n  if (!data.links) {\n    (0, _utils.logWarning)(\"Graph\", _err[\"default\"].INSUFFICIENT_LINKS);\n    data.links = [];\n  }\n  var n = data.links.length;\n  var _loop = function _loop(i) {\n    var l = data.links[i];\n    if (!data.nodes.find(function (n) {\n      return n.id === l.source;\n    })) {\n      (0, _utils.throwErr)(\"Graph\", \"\".concat(_err[\"default\"].INVALID_LINKS, \" - \\\"\").concat(l.source, \"\\\" is not a valid source node id\"));\n    }\n    if (!data.nodes.find(function (n) {\n      return n.id === l.target;\n    })) {\n      (0, _utils.throwErr)(\"Graph\", \"\".concat(_err[\"default\"].INVALID_LINKS, \" - \\\"\").concat(l.target, \"\\\" is not a valid target node id\"));\n    }\n    if (l && l.value !== undefined && typeof l.value !== \"number\") {\n      (0, _utils.throwErr)(\"Graph\", \"\".concat(_err[\"default\"].INVALID_LINK_VALUE, \" - found in link with source \\\"\").concat(l.source, \"\\\" and target \\\"\").concat(l.target, \"\\\"\"));\n    }\n  };\n  for (var i = 0; i < n; i++) {\n    _loop(i);\n  }\n} // list of properties that are of no interest when it comes to nodes and links comparison\n\nvar NODE_PROPERTIES_DISCARD_TO_COMPARE = [\"x\", \"y\", \"vx\", \"vy\", \"index\"];\n/**\n * Picks the id.\n * @param {Object} o object to pick from.\n * @returns {Object} new object with id property only.\n * @memberof Graph/helper\n */\n\nfunction _pickId(o) {\n  return (0, _utils.pick)(o, [\"id\"]);\n}\n/**\n * Picks source and target.\n * @param {Object} o object to pick from.\n * @returns {Object} new object with source and target only.\n * @memberof Graph/helper\n */\n\nfunction _pickSourceAndTarget(o) {\n  return (0, _utils.pick)(o, [\"source\", \"target\"]);\n}\n/**\n * This function checks for graph elements (nodes and links) changes, in two different\n * levels of significance, updated elements (whether some property has changed in some\n * node or link) and new elements (whether some new elements or added/removed from the graph).\n * @param {Object} nextProps - nextProps that graph will receive.\n * @param {Object} currentState - the current state of the graph.\n * @returns {Object.<string, boolean>} returns object containing update check flags:\n * - newGraphElements - flag that indicates whether new graph elements were added.\n * - graphElementsUpdated - flag that indicates whether some graph elements have\n * updated (some property that is not in NODE_PROPERTIES_DISCARD_TO_COMPARE was added to\n * some node or link or was updated).\n * @memberof Graph/helper\n */\n\nfunction checkForGraphElementsChanges(nextProps, currentState) {\n  var nextNodes = nextProps.data.nodes.map(function (n) {\n    return (0, _utils.antiPick)(n, NODE_PROPERTIES_DISCARD_TO_COMPARE);\n  });\n  var nextLinks = nextProps.data.links;\n  var stateD3Nodes = currentState.d3Nodes.map(function (n) {\n    return (0, _utils.antiPick)(n, NODE_PROPERTIES_DISCARD_TO_COMPARE);\n  });\n  var stateD3Links = currentState.d3Links.map(function (l) {\n    return {\n      source: getId(l.source),\n      target: getId(l.target)\n    };\n  });\n  var graphElementsUpdated = !((0, _utils.isDeepEqual)(nextNodes, stateD3Nodes) && (0, _utils.isDeepEqual)(nextLinks, stateD3Links));\n  var newGraphElements = nextNodes.length !== stateD3Nodes.length || nextLinks.length !== stateD3Links.length || !(0, _utils.isDeepEqual)(nextNodes.map(_pickId), stateD3Nodes.map(_pickId)) || !(0, _utils.isDeepEqual)(nextLinks.map(_pickSourceAndTarget), stateD3Links.map(_pickSourceAndTarget));\n  return {\n    graphElementsUpdated: graphElementsUpdated,\n    newGraphElements: newGraphElements\n  };\n}\n/**\n * Logic to check for changes in graph config.\n * @param {Object} nextProps - nextProps that graph will receive.\n * @param {Object} currentState - the current state of the graph.\n * @returns {Object.<string, boolean>} returns object containing update check flags:\n * - configUpdated - global flag that indicates if any property was updated.\n * - d3ConfigUpdated - specific flag that indicates changes in d3 configurations.\n * @memberof Graph/helper\n */\n\nfunction checkForGraphConfigChanges(nextProps, currentState) {\n  var newConfig = nextProps.config || {};\n  var configUpdated = newConfig && !(0, _utils.isEmptyObject)(newConfig) && !(0, _utils.isDeepEqual)(newConfig, currentState.config);\n  var d3ConfigUpdated = newConfig && newConfig.d3 && !(0, _utils.isDeepEqual)(newConfig.d3, currentState.config.d3);\n  return {\n    configUpdated: configUpdated,\n    d3ConfigUpdated: d3ConfigUpdated\n  };\n}\n/**\n * Returns the transformation to apply in order to center the graph on the\n * selected node.\n * @param {Object} d3Node - node to focus the graph view on.\n * @param {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {string} containerElId - ID of container element\n * @returns {string|undefined} transform rule to apply.\n * @memberof Graph/helper\n */\n\nfunction getCenterAndZoomTransformation(d3Node, config, containerElId) {\n  if (!d3Node) {\n    return;\n  }\n  var width = config.width,\n    height = config.height,\n    focusZoom = config.focusZoom;\n  var selector = (0, _d3Selection.select)(\"#\".concat(containerElId)); // in order to initialize the new position\n\n  selector.call((0, _d3Zoom.zoom)().transform, _d3Zoom.zoomIdentity.translate(width / 2, height / 2).scale(focusZoom).translate(-d3Node.x, -d3Node.y));\n  return \"\\n    translate(\".concat(width / 2, \", \").concat(height / 2, \")\\n    scale(\").concat(focusZoom, \")\\n    translate(\").concat(-d3Node.x, \", \").concat(-d3Node.y, \")\\n  \");\n}\n/**\n * This function extracts an id from a link.\n * **Why this function?**\n * According to [d3-force](https://github.com/d3/d3-force#link_links)\n * d3 links might be initialized with \"source\" and \"target\"\n * properties as numbers or strings, but after initialization they\n * are converted to an object. This small utility functions ensures\n * that weather in initialization or further into the lifetime of the graph\n * we always get the id.\n * @param {Object|string|number} sot source or target\n * of the link to extract id.\n * we want to extract an id.\n * @returns {string|number} the id of the link.\n * @memberof Graph/helper\n */\n\nfunction getId(sot) {\n  return sot.id !== undefined && sot.id !== null ? sot.id : sot;\n}\n/**\n * Encapsulates common procedures to initialize graph.\n * @param {Object} props - Graph component props, object that holds data, id and config.\n * @param {Object} props.data - Data object holds links (array of **Link**) and nodes (array of **Node**).\n * @param {string} props.id - the graph id.\n * @param {Object} props.config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a fully (re)initialized graph state object.\n * @memberof Graph/helper\n */\n\nfunction initializeGraphState(_ref, state) {\n  var data = _ref.data,\n    id = _ref.id,\n    config = _ref.config;\n  _validateGraphData(data);\n  var graph;\n  if (state && state.nodes) {\n    graph = {\n      nodes: data.nodes.map(function (n) {\n        return state.nodes[n.id] ? _objectSpread({}, n, {}, (0, _utils.pick)(state.nodes[n.id], NODE_PROPS_WHITELIST)) : _objectSpread({}, n);\n      }),\n      links: data.links.map(function (l, index) {\n        return _mergeDataLinkWithD3Link(l, index, state && state.d3Links, config, state);\n      })\n    };\n  } else {\n    graph = {\n      nodes: data.nodes.map(function (n) {\n        return _objectSpread({}, n);\n      }),\n      links: data.links.map(function (l) {\n        return _objectSpread({}, l);\n      })\n    };\n  }\n  var newConfig = _objectSpread({}, (0, _utils.merge)(_graph3[\"default\"], config || {})),\n    links = _initializeLinks(graph.links, newConfig),\n    // matrix of graph connections\n    nodes = _tagOrphanNodes(initializeNodes(graph.nodes), links);\n  var _graph = graph,\n    d3Nodes = _graph.nodes,\n    d3Links = _graph.links;\n  var formatedId = id.replace(/ /g, \"_\");\n  var simulation = _createForceSimulation(newConfig.width, newConfig.height, newConfig.d3 && newConfig.d3.gravity);\n  var minZoom = newConfig.minZoom,\n    maxZoom = newConfig.maxZoom,\n    focusZoom = newConfig.focusZoom;\n  if (focusZoom > maxZoom) {\n    newConfig.focusZoom = maxZoom;\n  } else if (focusZoom < minZoom) {\n    newConfig.focusZoom = minZoom;\n  }\n  return {\n    id: formatedId,\n    config: newConfig,\n    links: links,\n    d3Links: d3Links,\n    nodes: nodes,\n    d3Nodes: d3Nodes,\n    highlightedNode: \"\",\n    simulation: simulation,\n    newGraphElements: false,\n    configUpdated: false,\n    transform: 1,\n    draggedNode: null\n  };\n}\n/**\n * This function updates the highlighted value for a given node and also updates highlight props.\n * @param {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param {Object.<string, Object>} links - an object containing a matrix of connections of the graph.\n * @param {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param {string} id - identifier of node to update.\n * @param {string} value - new highlight value for given node.\n * @returns {Object} returns an object containing the updated nodes\n * and the id of the highlighted node.\n * @memberof Graph/helper\n */\n\nfunction updateNodeHighlightedValue(nodes, links, config, id) {\n  var value = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var highlightedNode = value ? id : \"\";\n  var node = _objectSpread({}, nodes[id], {\n    highlighted: value\n  });\n  var updatedNodes = _objectSpread({}, nodes, _defineProperty({}, id, node)); // when highlightDegree is 0 we want only to highlight selected node\n\n  if (links[id] && config.highlightDegree !== 0) {\n    updatedNodes = Object.keys(links[id]).reduce(function (acc, linkId) {\n      var updatedNode = _objectSpread({}, updatedNodes[linkId], {\n        highlighted: value\n      });\n      acc[linkId] = updatedNode;\n      return acc;\n    }, updatedNodes);\n  }\n  return {\n    nodes: updatedNodes,\n    highlightedNode: highlightedNode\n  };\n}\n/**\n * Computes the normalized vector from a vector.\n * @param {Object} vector a 2D vector with x and y components\n * @param {number} vector.x x coordinate\n * @param {number} vector.y y coordinate\n * @returns {Object} normalized vector\n * @memberof Graph/helper\n */\n\nfunction normalize(vector) {\n  var norm = Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n  return norm === 0 ? vector : {\n    x: vector.x / norm,\n    y: vector.y / norm\n  };\n}\nvar SYMBOLS_WITH_OPTIMIZED_POSITIONING = new Set([_graph2[\"default\"].SYMBOLS.CIRCLE]);\n/**\n * Computes new node coordinates to make arrowheads point at nodes.\n * Arrow configuration is only available for circles.\n * @param {Object} info - the couple of nodes we need to compute new coordinates\n * @param {string} info.sourceId - node source id\n * @param {string} info.targetId - node target id\n * @param {Object} info.sourceCoords - node source coordinates\n * @param {Object} info.targetCoords - node target coordinates\n * @param {Object.<string, Object>} nodes - same as {@link #graphrenderer|nodes in renderGraph}.\n * @param {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {number} strokeWidth width of the link stroke\n * @returns {Object} new nodes coordinates\n * @memberof Graph/helper\n */\n\nfunction getNormalizedNodeCoordinates(_ref2, nodes, config, strokeWidth) {\n  var _config$node, _config$node2, _config$node3;\n  var sourceId = _ref2.sourceId,\n    targetId = _ref2.targetId,\n    _ref2$sourceCoords = _ref2.sourceCoords,\n    sourceCoords = _ref2$sourceCoords === void 0 ? {} : _ref2$sourceCoords,\n    _ref2$targetCoords = _ref2.targetCoords,\n    targetCoords = _ref2$targetCoords === void 0 ? {} : _ref2$targetCoords;\n  var sourceNode = nodes === null || nodes === void 0 ? void 0 : nodes[sourceId];\n  var targetNode = nodes === null || nodes === void 0 ? void 0 : nodes[targetId];\n  if (!sourceNode || !targetNode) {\n    return {\n      sourceCoords: sourceCoords,\n      targetCoords: targetCoords\n    };\n  }\n  if (((_config$node = config.node) === null || _config$node === void 0 ? void 0 : _config$node.viewGenerator) || (sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.viewGenerator) || (targetNode === null || targetNode === void 0 ? void 0 : targetNode.viewGenerator)) {\n    return {\n      sourceCoords: sourceCoords,\n      targetCoords: targetCoords\n    };\n  }\n  var sourceSymbolType = sourceNode.symbolType || ((_config$node2 = config.node) === null || _config$node2 === void 0 ? void 0 : _config$node2.symbolType);\n  var targetSymbolType = targetNode.symbolType || ((_config$node3 = config.node) === null || _config$node3 === void 0 ? void 0 : _config$node3.symbolType);\n  if (!SYMBOLS_WITH_OPTIMIZED_POSITIONING.has(sourceSymbolType) && !SYMBOLS_WITH_OPTIMIZED_POSITIONING.has(targetSymbolType)) {\n    // if symbols don't have optimized positioning implementations fallback to input coords\n    return {\n      sourceCoords: sourceCoords,\n      targetCoords: targetCoords\n    };\n  }\n  var x1 = sourceCoords.x,\n    y1 = sourceCoords.y;\n  var x2 = targetCoords.x,\n    y2 = targetCoords.y;\n  var directionVector = normalize({\n    x: x2 - x1,\n    y: y2 - y1\n  });\n  switch (sourceSymbolType) {\n    case _graph2[\"default\"].SYMBOLS.CIRCLE:\n      {\n        var sourceNodeSize = (sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.size) || config.node.size; // because this is a circle and A = pi * r^2\n        // we multiply by 0.95, because if we don't the link is not melting properly\n\n        sourceNodeSize = Math.sqrt(sourceNodeSize / Math.PI) * 0.95; // points from the sourceCoords, we move them not to begin in the circle but outside\n\n        x1 += sourceNodeSize * directionVector.x;\n        y1 += sourceNodeSize * directionVector.y;\n        break;\n      }\n  }\n  switch (targetSymbolType) {\n    case _graph2[\"default\"].SYMBOLS.CIRCLE:\n      {\n        var _config$link, _config$link2;\n\n        // it's fine `markerWidth` or `markerHeight` we just want to fallback to a number\n        // to avoid NaN on `Math.min(undefined, undefined) > NaN\n        var strokeSize = strokeWidth * Math.min(((_config$link = config.link) === null || _config$link === void 0 ? void 0 : _config$link.markerWidth) || 0, ((_config$link2 = config.link) === null || _config$link2 === void 0 ? void 0 : _config$link2.markerHeight) || 0);\n        var targetNodeSize = (targetNode === null || targetNode === void 0 ? void 0 : targetNode.size) || config.node.size; // because this is a circle and A = pi * r^2\n        // we multiply by 0.95, because if we don't the link is not melting properly\n\n        targetNodeSize = Math.sqrt(targetNodeSize / Math.PI) * 0.95; // points from the targetCoords, we move the by the size of the radius of the circle + the size of the arrow\n\n        x2 -= (targetNodeSize + (config.directed ? strokeSize : 0)) * directionVector.x;\n        y2 -= (targetNodeSize + (config.directed ? strokeSize : 0)) * directionVector.y;\n        break;\n      }\n  }\n  return {\n    sourceCoords: {\n      x: x1,\n      y: y1\n    },\n    targetCoords: {\n      x: x2,\n      y: y2\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","checkForGraphConfigChanges","checkForGraphElementsChanges","getCenterAndZoomTransformation","getId","initializeGraphState","updateNodeHighlightedValue","getNormalizedNodeCoordinates","initializeNodes","_d3Force","require","_d3Selection","_d3Zoom","_graph2","_interopRequireDefault","_graph3","_err","_utils","_collapse","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","NODE_PROPS_WHITELIST","LINK_PROPS_WHITELIST","_createForceSimulation","width","height","gravity","frx","forceX","strength","FORCE_X","fry","forceY","FORCE_Y","forceStrength","forceSimulation","force","forceManyBody","_initializeLinks","graphLinks","config","reduce","links","l","collapsible","isHidden","directed","graphNodes","nodes","n","node","highlighted","prototype","hasOwnProperty","call","x","fx","y","fy","id","toString","_mergeDataLinkWithD3Link","link","index","d3Links","undefined","state","tmp","find","d3Link","pick","customProps","antiPick","toggledDirected","refinedD3Link","_tagOrphanNodes","linksMatrix","acc","nodeId","_computeNodeDegree","computeNodeDegree","inDegree","outDegree","taggedNode","_orphan","_validateGraphData","data","logWarning","INSUFFICIENT_DATA","INSUFFICIENT_LINKS","_loop","throwErr","concat","INVALID_LINKS","INVALID_LINK_VALUE","NODE_PROPERTIES_DISCARD_TO_COMPARE","_pickId","o","_pickSourceAndTarget","nextProps","currentState","nextNodes","map","nextLinks","stateD3Nodes","d3Nodes","stateD3Links","graphElementsUpdated","isDeepEqual","newGraphElements","newConfig","configUpdated","isEmptyObject","d3ConfigUpdated","d3","d3Node","containerElId","focusZoom","selector","select","zoom","transform","zoomIdentity","translate","scale","sot","_ref","graph","merge","_graph","formatedId","replace","simulation","minZoom","maxZoom","highlightedNode","draggedNode","updatedNodes","highlightDegree","linkId","updatedNode","normalize","vector","norm","Math","sqrt","pow","SYMBOLS_WITH_OPTIMIZED_POSITIONING","Set","SYMBOLS","CIRCLE","_ref2","strokeWidth","_config$node","_config$node2","_config$node3","sourceId","targetId","_ref2$sourceCoords","sourceCoords","_ref2$targetCoords","targetCoords","sourceNode","targetNode","viewGenerator","sourceSymbolType","symbolType","targetSymbolType","has","x1","y1","x2","y2","directionVector","sourceNodeSize","size","PI","_config$link","_config$link2","strokeSize","min","markerWidth","markerHeight","targetNodeSize"],"sources":["C:/Users/barun/OneDrive/Documents/btp/chatbot/client/node_modules/react-d3-graph/lib/components/graph/graph.helper.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkForGraphConfigChanges = checkForGraphConfigChanges;\nexports.checkForGraphElementsChanges = checkForGraphElementsChanges;\nexports.getCenterAndZoomTransformation = getCenterAndZoomTransformation;\nexports.getId = getId;\nexports.initializeGraphState = initializeGraphState;\nexports.updateNodeHighlightedValue = updateNodeHighlightedValue;\nexports.getNormalizedNodeCoordinates = getNormalizedNodeCoordinates;\nexports.initializeNodes = initializeNodes;\n\nvar _d3Force = require(\"d3-force\");\n\nvar _d3Selection = require(\"d3-selection\");\n\nvar _d3Zoom = require(\"d3-zoom\");\n\nvar _graph2 = _interopRequireDefault(require(\"./graph.const\"));\n\nvar _graph3 = _interopRequireDefault(require(\"./graph.config\"));\n\nvar _err = _interopRequireDefault(require(\"../../err\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _collapse = require(\"./collapse.helper\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar NODE_PROPS_WHITELIST = [\"id\", \"highlighted\", \"x\", \"y\", \"index\", \"vy\", \"vx\"];\nvar LINK_PROPS_WHITELIST = [\"index\", \"source\", \"target\", \"isHidden\"];\n/**\n * Create d3 forceSimulation to be applied on the graph.<br/>\n * {@link https://github.com/d3/d3-force#forceSimulation|d3-force#forceSimulation}<br/>\n * {@link https://github.com/d3/d3-force#simulation_force|d3-force#simulation_force}<br/>\n * Wtf is a force? {@link https://github.com/d3/d3-force#forces| here}\n * @param  {number} width - the width of the container area of the graph.\n * @param  {number} height - the height of the container area of the graph.\n * @param  {number} gravity - the force strength applied to the graph.\n * @returns {Object} returns the simulation instance to be consumed.\n * @memberof Graph/helper\n */\n\nfunction _createForceSimulation(width, height, gravity) {\n  var frx = (0, _d3Force.forceX)(width / 2).strength(_graph2[\"default\"].FORCE_X);\n  var fry = (0, _d3Force.forceY)(height / 2).strength(_graph2[\"default\"].FORCE_Y);\n  var forceStrength = gravity;\n  return (0, _d3Force.forceSimulation)().force(\"charge\", (0, _d3Force.forceManyBody)().strength(forceStrength)).force(\"x\", frx).force(\"y\", fry);\n}\n/**\n * Receives a matrix of the graph with the links source and target as concrete node instances and it transforms it\n * in a lightweight matrix containing only links with source and target being strings representative of some node id\n * and the respective link value (if non existent will default to 1).\n * @param  {Array.<Link>} graphLinks - an array of all graph links.\n * @param  {Object} config - the graph config.\n * @returns {Object.<string, Object>} an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @memberof Graph/helper\n */\n\n\nfunction _initializeLinks(graphLinks, config) {\n  return graphLinks.reduce(function (links, l) {\n    var source = getId(l.source);\n    var target = getId(l.target);\n\n    if (!links[source]) {\n      links[source] = {};\n    }\n\n    if (!links[target]) {\n      links[target] = {};\n    }\n\n    var value = config.collapsible && l.isHidden ? 0 : l.value || 1;\n    links[source][target] = value;\n\n    if (!config.directed) {\n      links[target][source] = value;\n    }\n\n    return links;\n  }, {});\n}\n/**\n * Method that initialize graph nodes provided by rd3g consumer and adds additional default mandatory properties\n * that are optional for the user. Also it generates an index mapping, this maps nodes ids the their index in the array\n * of nodes. This is needed because d3 callbacks such as node click and link click return the index of the node.\n * @param  {Array.<Node>} graphNodes - the array of nodes provided by the rd3g consumer.\n * @returns {Object.<string, Object>} returns the nodes ready to be used within rd3g with additional properties such as x, y\n * and highlighted values.\n * @memberof Graph/helper\n */\n\n\nfunction initializeNodes(graphNodes) {\n  var nodes = {};\n  var n = graphNodes.length;\n\n  for (var i = 0; i < n; i++) {\n    var node = graphNodes[i];\n    node.highlighted = false; // if an fx (forced x) is given, we want to use that\n\n    if (Object.prototype.hasOwnProperty.call(node, \"fx\")) {\n      node.x = node.fx;\n    } else if (!Object.prototype.hasOwnProperty.call(node, \"x\")) {\n      node.x = 0;\n    } // if an fy (forced y) is given, we want to use that\n\n\n    if (Object.prototype.hasOwnProperty.call(node, \"fy\")) {\n      node.y = node.fy;\n    } else if (!Object.prototype.hasOwnProperty.call(node, \"y\")) {\n      node.y = 0;\n    }\n\n    nodes[node.id.toString()] = node;\n  }\n\n  return nodes;\n}\n/**\n * Maps an input link (with format `{ source: 'sourceId', target: 'targetId' }`) to a d3Link\n * (with format `{ source: { id: 'sourceId' }, target: { id: 'targetId' } }`). If d3Link with\n * given index exists already that same d3Link is returned.\n * @param {Object} link - input link.\n * @param {number} index - index of the input link.\n * @param {Array.<Object>} d3Links - all d3Links.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a d3Link.\n * @memberof Graph/helper\n */\n\n\nfunction _mergeDataLinkWithD3Link(link, index) {\n  var d3Links = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var config = arguments.length > 3 ? arguments[3] : undefined;\n  var state = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  // find the matching link if it exists\n  var tmp = d3Links.find(function (l) {\n    return l.source.id === link.source && l.target.id === link.target;\n  });\n  var d3Link = tmp && (0, _utils.pick)(tmp, LINK_PROPS_WHITELIST);\n  var customProps = (0, _utils.antiPick)(link, [\"source\", \"target\"]);\n\n  if (d3Link) {\n    var toggledDirected = state.config && Object.prototype.hasOwnProperty.call(state.config, \"directed\") && config.directed !== state.config.directed;\n\n    var refinedD3Link = _objectSpread({\n      index: index\n    }, d3Link, {}, customProps); // every time we toggle directed config all links should be visible again\n\n\n    if (toggledDirected) {\n      return _objectSpread({}, refinedD3Link, {\n        isHidden: false\n      });\n    } // every time we disable collapsible (collapsible is false) all links should be visible again\n\n\n    return config.collapsible ? refinedD3Link : _objectSpread({}, refinedD3Link, {\n      isHidden: false\n    });\n  }\n\n  var highlighted = false;\n  var source = {\n    id: link.source,\n    highlighted: highlighted\n  };\n  var target = {\n    id: link.target,\n    highlighted: highlighted\n  };\n  return _objectSpread({\n    index: index,\n    source: source,\n    target: target\n  }, customProps);\n}\n/**\n * Tags orphan nodes with a `_orphan` flag.\n * @param {Object.<string, Object>} nodes - nodes mapped by their id.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @returns {Object.<string, Object>} same input nodes structure with tagged orphans nodes where applicable.\n * @memberof Graph/helper\n */\n\n\nfunction _tagOrphanNodes(nodes, linksMatrix) {\n  return Object.keys(nodes).reduce(function (acc, nodeId) {\n    var _computeNodeDegree = (0, _collapse.computeNodeDegree)(nodeId, linksMatrix),\n        inDegree = _computeNodeDegree.inDegree,\n        outDegree = _computeNodeDegree.outDegree;\n\n    var node = nodes[nodeId];\n    var taggedNode = inDegree === 0 && outDegree === 0 ? _objectSpread({}, node, {\n      _orphan: true\n    }) : node;\n    acc[nodeId] = taggedNode;\n    return acc;\n  }, {});\n}\n/**\n * Some integrity validations on links and nodes structure. If some validation fails the function will\n * throw an error.\n * @param  {Object} data - Same as {@link #initializeGraphState|data in initializeGraphState}.\n * @throws can throw the following error or warning msg:\n * INSUFFICIENT_DATA - msg if no nodes are provided\n * INVALID_LINKS - if links point to nonexistent nodes\n * INSUFFICIENT_LINKS - if no links are provided (not even empty Array)\n * @returns {undefined}\n * @memberof Graph/helper\n */\n\n\nfunction _validateGraphData(data) {\n  if (!data.nodes || !data.nodes.length) {\n    (0, _utils.logWarning)(\"Graph\", _err[\"default\"].INSUFFICIENT_DATA);\n    data.nodes = [];\n  }\n\n  if (!data.links) {\n    (0, _utils.logWarning)(\"Graph\", _err[\"default\"].INSUFFICIENT_LINKS);\n    data.links = [];\n  }\n\n  var n = data.links.length;\n\n  var _loop = function _loop(i) {\n    var l = data.links[i];\n\n    if (!data.nodes.find(function (n) {\n      return n.id === l.source;\n    })) {\n      (0, _utils.throwErr)(\"Graph\", \"\".concat(_err[\"default\"].INVALID_LINKS, \" - \\\"\").concat(l.source, \"\\\" is not a valid source node id\"));\n    }\n\n    if (!data.nodes.find(function (n) {\n      return n.id === l.target;\n    })) {\n      (0, _utils.throwErr)(\"Graph\", \"\".concat(_err[\"default\"].INVALID_LINKS, \" - \\\"\").concat(l.target, \"\\\" is not a valid target node id\"));\n    }\n\n    if (l && l.value !== undefined && typeof l.value !== \"number\") {\n      (0, _utils.throwErr)(\"Graph\", \"\".concat(_err[\"default\"].INVALID_LINK_VALUE, \" - found in link with source \\\"\").concat(l.source, \"\\\" and target \\\"\").concat(l.target, \"\\\"\"));\n    }\n  };\n\n  for (var i = 0; i < n; i++) {\n    _loop(i);\n  }\n} // list of properties that are of no interest when it comes to nodes and links comparison\n\n\nvar NODE_PROPERTIES_DISCARD_TO_COMPARE = [\"x\", \"y\", \"vx\", \"vy\", \"index\"];\n/**\n * Picks the id.\n * @param {Object} o object to pick from.\n * @returns {Object} new object with id property only.\n * @memberof Graph/helper\n */\n\nfunction _pickId(o) {\n  return (0, _utils.pick)(o, [\"id\"]);\n}\n/**\n * Picks source and target.\n * @param {Object} o object to pick from.\n * @returns {Object} new object with source and target only.\n * @memberof Graph/helper\n */\n\n\nfunction _pickSourceAndTarget(o) {\n  return (0, _utils.pick)(o, [\"source\", \"target\"]);\n}\n/**\n * This function checks for graph elements (nodes and links) changes, in two different\n * levels of significance, updated elements (whether some property has changed in some\n * node or link) and new elements (whether some new elements or added/removed from the graph).\n * @param {Object} nextProps - nextProps that graph will receive.\n * @param {Object} currentState - the current state of the graph.\n * @returns {Object.<string, boolean>} returns object containing update check flags:\n * - newGraphElements - flag that indicates whether new graph elements were added.\n * - graphElementsUpdated - flag that indicates whether some graph elements have\n * updated (some property that is not in NODE_PROPERTIES_DISCARD_TO_COMPARE was added to\n * some node or link or was updated).\n * @memberof Graph/helper\n */\n\n\nfunction checkForGraphElementsChanges(nextProps, currentState) {\n  var nextNodes = nextProps.data.nodes.map(function (n) {\n    return (0, _utils.antiPick)(n, NODE_PROPERTIES_DISCARD_TO_COMPARE);\n  });\n  var nextLinks = nextProps.data.links;\n  var stateD3Nodes = currentState.d3Nodes.map(function (n) {\n    return (0, _utils.antiPick)(n, NODE_PROPERTIES_DISCARD_TO_COMPARE);\n  });\n  var stateD3Links = currentState.d3Links.map(function (l) {\n    return {\n      source: getId(l.source),\n      target: getId(l.target)\n    };\n  });\n  var graphElementsUpdated = !((0, _utils.isDeepEqual)(nextNodes, stateD3Nodes) && (0, _utils.isDeepEqual)(nextLinks, stateD3Links));\n  var newGraphElements = nextNodes.length !== stateD3Nodes.length || nextLinks.length !== stateD3Links.length || !(0, _utils.isDeepEqual)(nextNodes.map(_pickId), stateD3Nodes.map(_pickId)) || !(0, _utils.isDeepEqual)(nextLinks.map(_pickSourceAndTarget), stateD3Links.map(_pickSourceAndTarget));\n  return {\n    graphElementsUpdated: graphElementsUpdated,\n    newGraphElements: newGraphElements\n  };\n}\n/**\n * Logic to check for changes in graph config.\n * @param {Object} nextProps - nextProps that graph will receive.\n * @param {Object} currentState - the current state of the graph.\n * @returns {Object.<string, boolean>} returns object containing update check flags:\n * - configUpdated - global flag that indicates if any property was updated.\n * - d3ConfigUpdated - specific flag that indicates changes in d3 configurations.\n * @memberof Graph/helper\n */\n\n\nfunction checkForGraphConfigChanges(nextProps, currentState) {\n  var newConfig = nextProps.config || {};\n  var configUpdated = newConfig && !(0, _utils.isEmptyObject)(newConfig) && !(0, _utils.isDeepEqual)(newConfig, currentState.config);\n  var d3ConfigUpdated = newConfig && newConfig.d3 && !(0, _utils.isDeepEqual)(newConfig.d3, currentState.config.d3);\n  return {\n    configUpdated: configUpdated,\n    d3ConfigUpdated: d3ConfigUpdated\n  };\n}\n/**\n * Returns the transformation to apply in order to center the graph on the\n * selected node.\n * @param {Object} d3Node - node to focus the graph view on.\n * @param {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {string} containerElId - ID of container element\n * @returns {string|undefined} transform rule to apply.\n * @memberof Graph/helper\n */\n\n\nfunction getCenterAndZoomTransformation(d3Node, config, containerElId) {\n  if (!d3Node) {\n    return;\n  }\n\n  var width = config.width,\n      height = config.height,\n      focusZoom = config.focusZoom;\n  var selector = (0, _d3Selection.select)(\"#\".concat(containerElId)); // in order to initialize the new position\n\n  selector.call((0, _d3Zoom.zoom)().transform, _d3Zoom.zoomIdentity.translate(width / 2, height / 2).scale(focusZoom).translate(-d3Node.x, -d3Node.y));\n  return \"\\n    translate(\".concat(width / 2, \", \").concat(height / 2, \")\\n    scale(\").concat(focusZoom, \")\\n    translate(\").concat(-d3Node.x, \", \").concat(-d3Node.y, \")\\n  \");\n}\n/**\n * This function extracts an id from a link.\n * **Why this function?**\n * According to [d3-force](https://github.com/d3/d3-force#link_links)\n * d3 links might be initialized with \"source\" and \"target\"\n * properties as numbers or strings, but after initialization they\n * are converted to an object. This small utility functions ensures\n * that weather in initialization or further into the lifetime of the graph\n * we always get the id.\n * @param {Object|string|number} sot source or target\n * of the link to extract id.\n * we want to extract an id.\n * @returns {string|number} the id of the link.\n * @memberof Graph/helper\n */\n\n\nfunction getId(sot) {\n  return sot.id !== undefined && sot.id !== null ? sot.id : sot;\n}\n/**\n * Encapsulates common procedures to initialize graph.\n * @param {Object} props - Graph component props, object that holds data, id and config.\n * @param {Object} props.data - Data object holds links (array of **Link**) and nodes (array of **Node**).\n * @param {string} props.id - the graph id.\n * @param {Object} props.config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a fully (re)initialized graph state object.\n * @memberof Graph/helper\n */\n\n\nfunction initializeGraphState(_ref, state) {\n  var data = _ref.data,\n      id = _ref.id,\n      config = _ref.config;\n\n  _validateGraphData(data);\n\n  var graph;\n\n  if (state && state.nodes) {\n    graph = {\n      nodes: data.nodes.map(function (n) {\n        return state.nodes[n.id] ? _objectSpread({}, n, {}, (0, _utils.pick)(state.nodes[n.id], NODE_PROPS_WHITELIST)) : _objectSpread({}, n);\n      }),\n      links: data.links.map(function (l, index) {\n        return _mergeDataLinkWithD3Link(l, index, state && state.d3Links, config, state);\n      })\n    };\n  } else {\n    graph = {\n      nodes: data.nodes.map(function (n) {\n        return _objectSpread({}, n);\n      }),\n      links: data.links.map(function (l) {\n        return _objectSpread({}, l);\n      })\n    };\n  }\n\n  var newConfig = _objectSpread({}, (0, _utils.merge)(_graph3[\"default\"], config || {})),\n      links = _initializeLinks(graph.links, newConfig),\n      // matrix of graph connections\n  nodes = _tagOrphanNodes(initializeNodes(graph.nodes), links);\n\n  var _graph = graph,\n      d3Nodes = _graph.nodes,\n      d3Links = _graph.links;\n  var formatedId = id.replace(/ /g, \"_\");\n\n  var simulation = _createForceSimulation(newConfig.width, newConfig.height, newConfig.d3 && newConfig.d3.gravity);\n\n  var minZoom = newConfig.minZoom,\n      maxZoom = newConfig.maxZoom,\n      focusZoom = newConfig.focusZoom;\n\n  if (focusZoom > maxZoom) {\n    newConfig.focusZoom = maxZoom;\n  } else if (focusZoom < minZoom) {\n    newConfig.focusZoom = minZoom;\n  }\n\n  return {\n    id: formatedId,\n    config: newConfig,\n    links: links,\n    d3Links: d3Links,\n    nodes: nodes,\n    d3Nodes: d3Nodes,\n    highlightedNode: \"\",\n    simulation: simulation,\n    newGraphElements: false,\n    configUpdated: false,\n    transform: 1,\n    draggedNode: null\n  };\n}\n/**\n * This function updates the highlighted value for a given node and also updates highlight props.\n * @param {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param {Object.<string, Object>} links - an object containing a matrix of connections of the graph.\n * @param {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param {string} id - identifier of node to update.\n * @param {string} value - new highlight value for given node.\n * @returns {Object} returns an object containing the updated nodes\n * and the id of the highlighted node.\n * @memberof Graph/helper\n */\n\n\nfunction updateNodeHighlightedValue(nodes, links, config, id) {\n  var value = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var highlightedNode = value ? id : \"\";\n\n  var node = _objectSpread({}, nodes[id], {\n    highlighted: value\n  });\n\n  var updatedNodes = _objectSpread({}, nodes, _defineProperty({}, id, node)); // when highlightDegree is 0 we want only to highlight selected node\n\n\n  if (links[id] && config.highlightDegree !== 0) {\n    updatedNodes = Object.keys(links[id]).reduce(function (acc, linkId) {\n      var updatedNode = _objectSpread({}, updatedNodes[linkId], {\n        highlighted: value\n      });\n\n      acc[linkId] = updatedNode;\n      return acc;\n    }, updatedNodes);\n  }\n\n  return {\n    nodes: updatedNodes,\n    highlightedNode: highlightedNode\n  };\n}\n/**\n * Computes the normalized vector from a vector.\n * @param {Object} vector a 2D vector with x and y components\n * @param {number} vector.x x coordinate\n * @param {number} vector.y y coordinate\n * @returns {Object} normalized vector\n * @memberof Graph/helper\n */\n\n\nfunction normalize(vector) {\n  var norm = Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n  return norm === 0 ? vector : {\n    x: vector.x / norm,\n    y: vector.y / norm\n  };\n}\n\nvar SYMBOLS_WITH_OPTIMIZED_POSITIONING = new Set([_graph2[\"default\"].SYMBOLS.CIRCLE]);\n/**\n * Computes new node coordinates to make arrowheads point at nodes.\n * Arrow configuration is only available for circles.\n * @param {Object} info - the couple of nodes we need to compute new coordinates\n * @param {string} info.sourceId - node source id\n * @param {string} info.targetId - node target id\n * @param {Object} info.sourceCoords - node source coordinates\n * @param {Object} info.targetCoords - node target coordinates\n * @param {Object.<string, Object>} nodes - same as {@link #graphrenderer|nodes in renderGraph}.\n * @param {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {number} strokeWidth width of the link stroke\n * @returns {Object} new nodes coordinates\n * @memberof Graph/helper\n */\n\nfunction getNormalizedNodeCoordinates(_ref2, nodes, config, strokeWidth) {\n  var _config$node, _config$node2, _config$node3;\n\n  var sourceId = _ref2.sourceId,\n      targetId = _ref2.targetId,\n      _ref2$sourceCoords = _ref2.sourceCoords,\n      sourceCoords = _ref2$sourceCoords === void 0 ? {} : _ref2$sourceCoords,\n      _ref2$targetCoords = _ref2.targetCoords,\n      targetCoords = _ref2$targetCoords === void 0 ? {} : _ref2$targetCoords;\n  var sourceNode = nodes === null || nodes === void 0 ? void 0 : nodes[sourceId];\n  var targetNode = nodes === null || nodes === void 0 ? void 0 : nodes[targetId];\n\n  if (!sourceNode || !targetNode) {\n    return {\n      sourceCoords: sourceCoords,\n      targetCoords: targetCoords\n    };\n  }\n\n  if (((_config$node = config.node) === null || _config$node === void 0 ? void 0 : _config$node.viewGenerator) || (sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.viewGenerator) || (targetNode === null || targetNode === void 0 ? void 0 : targetNode.viewGenerator)) {\n    return {\n      sourceCoords: sourceCoords,\n      targetCoords: targetCoords\n    };\n  }\n\n  var sourceSymbolType = sourceNode.symbolType || ((_config$node2 = config.node) === null || _config$node2 === void 0 ? void 0 : _config$node2.symbolType);\n  var targetSymbolType = targetNode.symbolType || ((_config$node3 = config.node) === null || _config$node3 === void 0 ? void 0 : _config$node3.symbolType);\n\n  if (!SYMBOLS_WITH_OPTIMIZED_POSITIONING.has(sourceSymbolType) && !SYMBOLS_WITH_OPTIMIZED_POSITIONING.has(targetSymbolType)) {\n    // if symbols don't have optimized positioning implementations fallback to input coords\n    return {\n      sourceCoords: sourceCoords,\n      targetCoords: targetCoords\n    };\n  }\n\n  var x1 = sourceCoords.x,\n      y1 = sourceCoords.y;\n  var x2 = targetCoords.x,\n      y2 = targetCoords.y;\n  var directionVector = normalize({\n    x: x2 - x1,\n    y: y2 - y1\n  });\n\n  switch (sourceSymbolType) {\n    case _graph2[\"default\"].SYMBOLS.CIRCLE:\n      {\n        var sourceNodeSize = (sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.size) || config.node.size; // because this is a circle and A = pi * r^2\n        // we multiply by 0.95, because if we don't the link is not melting properly\n\n        sourceNodeSize = Math.sqrt(sourceNodeSize / Math.PI) * 0.95; // points from the sourceCoords, we move them not to begin in the circle but outside\n\n        x1 += sourceNodeSize * directionVector.x;\n        y1 += sourceNodeSize * directionVector.y;\n        break;\n      }\n  }\n\n  switch (targetSymbolType) {\n    case _graph2[\"default\"].SYMBOLS.CIRCLE:\n      {\n        var _config$link, _config$link2;\n\n        // it's fine `markerWidth` or `markerHeight` we just want to fallback to a number\n        // to avoid NaN on `Math.min(undefined, undefined) > NaN\n        var strokeSize = strokeWidth * Math.min(((_config$link = config.link) === null || _config$link === void 0 ? void 0 : _config$link.markerWidth) || 0, ((_config$link2 = config.link) === null || _config$link2 === void 0 ? void 0 : _config$link2.markerHeight) || 0);\n        var targetNodeSize = (targetNode === null || targetNode === void 0 ? void 0 : targetNode.size) || config.node.size; // because this is a circle and A = pi * r^2\n        // we multiply by 0.95, because if we don't the link is not melting properly\n\n        targetNodeSize = Math.sqrt(targetNodeSize / Math.PI) * 0.95; // points from the targetCoords, we move the by the size of the radius of the circle + the size of the arrow\n\n        x2 -= (targetNodeSize + (config.directed ? strokeSize : 0)) * directionVector.x;\n        y2 -= (targetNodeSize + (config.directed ? strokeSize : 0)) * directionVector.y;\n        break;\n      }\n  }\n\n  return {\n    sourceCoords: {\n      x: x1,\n      y: y1\n    },\n    targetCoords: {\n      x: x2,\n      y: y2\n    }\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}