{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barun\\\\OneDrive\\\\Documents\\\\btp\\\\chatbot\\\\client\\\\src\\\\flowtree.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './flowtree.css';\n// const API_URL = \"http://localhost:5001/fetchalldata\";\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faFolder, faFolderOpen } from \"@fortawesome/free-solid-svg-icons\";\n// // import \"./TreeNode.css\";\n\n// function TreeNode({ data }) {\n//   const [isOpen, setIsOpen] = useState(false);\n\n//   const toggle = () => {\n//     setIsOpen(!isOpen);\n//   };\n\n//   const hasChildren = data.children && data.children.length > 0;\n\n//   return (\n//     <li className=\"tree-node\">\n//       <div className=\"tree-node__content\">\n//         {hasChildren && (\n//           <FontAwesomeIcon\n//             icon={isOpen ? faFolderOpen : faFolder}\n//             className=\"tree-node__toggle\"\n//             onClick={toggle}\n//           />\n//         )}\n//         <span className=\"tree-node__label\">{data.name}</span>\n//         {data.value && (\n//           <span className=\"tree-node__value\">({data.value})</span>\n//         )}\n//       </div>\n//       {hasChildren && isOpen && (\n//         <ul className=\"tree-node__children\">\n//           {data.children.map((child) => (\n//             <TreeNode key={child.name} data={child} />\n//           ))}\n//         </ul>\n//       )}\n//     </li>\n//   );\n// }\n\n// export default TreeNode;\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./flowtree.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TreeNode(_ref) {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [collapsed, setCollapsed] = useState(true);\n  const handleClick = () => {\n    setCollapsed(!collapsed);\n  };\n  const renderChild = child => {\n    if (typeof child === \"object\") {\n      return /*#__PURE__*/_jsxDEV(TreeNode, {\n        data: child\n      }, child.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tree-node__value\",\n        children: [\"\\\"\", child, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-node__content\",\n      onClick: handleClick,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tree-node__toggle\",\n        children: collapsed ? \"+\" : \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tree-node__label\",\n        children: data.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), Object.values(data).filter(value => typeof value !== \"object\").map(value => renderChild(value))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), Object.values(data).filter(value => typeof value === \"object\").map(child => /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: `tree-node__children ${collapsed ? \"tree-node__children--collapsed\" : \"\"}`,\n      children: renderChild(child)\n    }, child.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(TreeNode, \"v9q8u3mX6e8FrJZVev9WfYlHYUo=\");\n_c = TreeNode;\nfunction TreeView(_ref2) {\n  _s2();\n  let {\n    apiUrl\n  } = _ref2;\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(apiUrl);\n      const jsonData = await response.json();\n      setData([jsonData]);\n    };\n    fetchData();\n  }, [apiUrl]);\n  console.log(jsonData);\n  ;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"tree-view\",\n    children: data.map(item => /*#__PURE__*/_jsxDEV(TreeNode, {\n      data: item\n    }, item.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <TreeView apiUrl=\"https://api.example.com/data\" />\n//     </div>\n//   );\n// }\n_s2(TreeView, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c2 = TreeView;\nexport default TreeView;\nvar _c, _c2;\n$RefreshReg$(_c, \"TreeNode\");\n$RefreshReg$(_c2, \"TreeView\");","map":{"version":3,"names":["React","useEffect","useState","TreeNode","data","collapsed","setCollapsed","handleClick","renderChild","child","name","Object","values","filter","value","map","TreeView","apiUrl","setData","fetchData","response","fetch","jsonData","json","console","log","item"],"sources":["C:/Users/barun/OneDrive/Documents/btp/chatbot/client/src/flowtree.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './flowtree.css';\r\n// const API_URL = \"http://localhost:5001/fetchalldata\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faFolder, faFolderOpen } from \"@fortawesome/free-solid-svg-icons\";\r\n// // import \"./TreeNode.css\";\r\n\r\n// function TreeNode({ data }) {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n\r\n//   const toggle = () => {\r\n//     setIsOpen(!isOpen);\r\n//   };\r\n\r\n//   const hasChildren = data.children && data.children.length > 0;\r\n\r\n//   return (\r\n//     <li className=\"tree-node\">\r\n//       <div className=\"tree-node__content\">\r\n//         {hasChildren && (\r\n//           <FontAwesomeIcon\r\n//             icon={isOpen ? faFolderOpen : faFolder}\r\n//             className=\"tree-node__toggle\"\r\n//             onClick={toggle}\r\n//           />\r\n//         )}\r\n//         <span className=\"tree-node__label\">{data.name}</span>\r\n//         {data.value && (\r\n//           <span className=\"tree-node__value\">({data.value})</span>\r\n//         )}\r\n//       </div>\r\n//       {hasChildren && isOpen && (\r\n//         <ul className=\"tree-node__children\">\r\n//           {data.children.map((child) => (\r\n//             <TreeNode key={child.name} data={child} />\r\n//           ))}\r\n//         </ul>\r\n//       )}\r\n//     </li>\r\n//   );\r\n// }\r\n\r\n// export default TreeNode;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./flowtree.css\";\r\n\r\nfunction TreeNode({ data }) {\r\n  const [collapsed, setCollapsed] = useState(true);\r\n\r\n  const handleClick = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  const renderChild = (child) => {\r\n    if (typeof child === \"object\") {\r\n      return <TreeNode key={child.name} data={child} />;\r\n    } else {\r\n      return <span className=\"tree-node__value\">\"{child}\"</span>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <li>\r\n      <div className=\"tree-node__content\" onClick={handleClick}>\r\n        <span className=\"tree-node__toggle\">\r\n          {collapsed ? \"+\" : \"-\"}\r\n        </span>\r\n        <span className=\"tree-node__label\">{data.name}</span>\r\n        {Object.values(data)\r\n          .filter((value) => typeof value !== \"object\")\r\n          .map((value) => renderChild(value))}\r\n      </div>\r\n      {Object.values(data)\r\n        .filter((value) => typeof value === \"object\")\r\n        .map((child) => (\r\n          <ul\r\n            key={child.name}\r\n            className={`tree-node__children ${\r\n              collapsed ? \"tree-node__children--collapsed\" : \"\"\r\n            }`}\r\n          >\r\n            {renderChild(child)}\r\n          </ul>\r\n        ))}\r\n    </li>\r\n  );\r\n}\r\n\r\nfunction TreeView({ apiUrl }) {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(apiUrl);\r\n      const jsonData = await response.json();\r\n      setData([jsonData]);\r\n    };\r\n\r\n    fetchData();\r\n  }, [apiUrl]);\r\n  console.log(jsonData);\r\n  ;\r\n\r\n  return (\r\n    <ul className=\"tree-view\">\r\n      {data.map((item) => (\r\n        <TreeNode key={item.name} data={item} />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <TreeView apiUrl=\"https://api.example.com/data\" />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default TreeView;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}