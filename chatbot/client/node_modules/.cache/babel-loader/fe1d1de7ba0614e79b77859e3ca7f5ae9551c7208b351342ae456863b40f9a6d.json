{"ast":null,"code":"import create from 'zustand';\nimport createContext from 'zustand/context';\nimport { zoomIdentity } from 'd3-zoom';\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nvar ConnectionMode;\n(function (ConnectionMode) {\n  ConnectionMode[\"Strict\"] = \"strict\";\n  ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\nvar BackgroundVariant;\n(function (BackgroundVariant) {\n  BackgroundVariant[\"Lines\"] = \"lines\";\n  BackgroundVariant[\"Dots\"] = \"dots\";\n})(BackgroundVariant || (BackgroundVariant = {}));\nvar PanOnScrollMode;\n(function (PanOnScrollMode) {\n  PanOnScrollMode[\"Free\"] = \"free\";\n  PanOnScrollMode[\"Vertical\"] = \"vertical\";\n  PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar ConnectionLineType;\n(function (ConnectionLineType) {\n  ConnectionLineType[\"Bezier\"] = \"default\";\n  ConnectionLineType[\"Straight\"] = \"straight\";\n  ConnectionLineType[\"Step\"] = \"step\";\n  ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n  ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\nvar MarkerType;\n(function (MarkerType) {\n  MarkerType[\"Arrow\"] = \"arrow\";\n  MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\nvar Position;\n(function (Position) {\n  Position[\"Left\"] = \"left\";\n  Position[\"Top\"] = \"top\";\n  Position[\"Right\"] = \"right\";\n  Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\nvar getDimensions = function getDimensions(node) {\n  return {\n    width: node.offsetWidth,\n    height: node.offsetHeight\n  };\n};\nvar clamp = function clamp(val) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return Math.min(Math.max(val, min), max);\n};\nvar clampPosition = function clampPosition(position, extent) {\n  return {\n    x: clamp(position.x, extent[0][0], extent[1][0]),\n    y: clamp(position.y, extent[0][1], extent[1][1])\n  };\n};\nvar getHostForElement = function getHostForElement(element) {\n  var _element$getRootNode, _window;\n  return ((_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element)) || ((_window = window) === null || _window === void 0 ? void 0 : _window.document);\n};\nvar getBoundsOfBoxes = function getBoundsOfBoxes(box1, box2) {\n  return {\n    x: Math.min(box1.x, box2.x),\n    y: Math.min(box1.y, box2.y),\n    x2: Math.max(box1.x2, box2.x2),\n    y2: Math.max(box1.y2, box2.y2)\n  };\n};\nvar rectToBox = function rectToBox(_ref) {\n  var x = _ref.x,\n    y = _ref.y,\n    width = _ref.width,\n    height = _ref.height;\n  return {\n    x: x,\n    y: y,\n    x2: x + width,\n    y2: y + height\n  };\n};\nvar boxToRect = function boxToRect(_ref2) {\n  var x = _ref2.x,\n    y = _ref2.y,\n    x2 = _ref2.x2,\n    y2 = _ref2.y2;\n  return {\n    x: x,\n    y: y,\n    width: x2 - x,\n    height: y2 - y\n  };\n};\nvar getBoundsofRects = function getBoundsofRects(rect1, rect2) {\n  return boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\n};\nvar isNumeric = function isNumeric(n) {\n  return !isNaN(n) && isFinite(n);\n};\nvar internalsSymbol = Symbol('internals');\nfunction ownKeys$4(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$4(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction handleParentExpand(res, updateItem) {\n  var parent = res.find(function (e) {\n    return e.id === updateItem.parentNode;\n  });\n  if (parent) {\n    var extendWidth = updateItem.position.x + updateItem.width - parent.width;\n    var extendHeight = updateItem.position.y + updateItem.height - parent.height;\n    if (extendWidth > 0 || extendHeight > 0 || updateItem.position.x < 0 || updateItem.position.y < 0) {\n      var _parent$style$width, _parent$style$height;\n      parent.style = _objectSpread$4({}, parent.style) || {};\n      parent.style.width = (_parent$style$width = parent.style.width) !== null && _parent$style$width !== void 0 ? _parent$style$width : parent.width;\n      parent.style.height = (_parent$style$height = parent.style.height) !== null && _parent$style$height !== void 0 ? _parent$style$height : parent.height;\n      if (extendWidth > 0) {\n        parent.style.width += extendWidth;\n      }\n      if (extendHeight > 0) {\n        parent.style.height += extendHeight;\n      }\n      if (updateItem.position.x < 0) {\n        var xDiff = Math.abs(updateItem.position.x);\n        parent.position.x = parent.position.x - xDiff;\n        parent.style.width += xDiff;\n        updateItem.position.x = 0;\n      }\n      if (updateItem.position.y < 0) {\n        var yDiff = Math.abs(updateItem.position.y);\n        parent.position.y = parent.position.y - yDiff;\n        parent.style.height += yDiff;\n        updateItem.position.y = 0;\n      }\n      parent.width = parent.style.width;\n      parent.height = parent.style.height;\n    }\n  }\n}\nfunction applyChanges(changes, elements) {\n  // we need this hack to handle the setNodes and setEdges function of the useReactFlow hook for controlled flows\n  if (changes.some(function (c) {\n    return c.type === 'reset';\n  })) {\n    return changes.filter(function (c) {\n      return c.type === 'reset';\n    }).map(function (c) {\n      return c.item;\n    });\n  }\n  var initElements = changes.filter(function (c) {\n    return c.type === 'add';\n  }).map(function (c) {\n    return c.item;\n  });\n  return elements.reduce(function (res, item) {\n    var currentChange = changes.find(function (c) {\n      return c.id === item.id;\n    });\n    if (currentChange) {\n      switch (currentChange.type) {\n        case 'select':\n          {\n            res.push(_objectSpread$4(_objectSpread$4({}, item), {}, {\n              selected: currentChange.selected\n            }));\n            return res;\n          }\n        case 'position':\n          {\n            var updateItem = _objectSpread$4({}, item);\n            if (typeof currentChange.position !== 'undefined') {\n              updateItem.position = currentChange.position;\n            }\n            if (typeof currentChange.positionAbsolute !== 'undefined') {\n              updateItem.positionAbsolute = currentChange.positionAbsolute;\n            }\n            if (typeof currentChange.dragging !== 'undefined') {\n              updateItem.dragging = currentChange.dragging;\n            }\n            if (updateItem.expandParent) {\n              handleParentExpand(res, updateItem);\n            }\n            res.push(updateItem);\n            return res;\n          }\n        case 'dimensions':\n          {\n            var _updateItem = _objectSpread$4({}, item);\n            if (typeof currentChange.dimensions !== 'undefined') {\n              _updateItem.width = currentChange.dimensions.width;\n              _updateItem.height = currentChange.dimensions.height;\n            }\n            if (_updateItem.expandParent) {\n              handleParentExpand(res, _updateItem);\n            }\n            res.push(_updateItem);\n            return res;\n          }\n        case 'remove':\n          {\n            return res;\n          }\n      }\n    }\n    res.push(item);\n    return res;\n  }, initElements);\n}\nfunction applyNodeChanges(changes, nodes) {\n  return applyChanges(changes, nodes);\n}\nfunction applyEdgeChanges(changes, edges) {\n  return applyChanges(changes, edges);\n}\nvar createSelectionChange = function createSelectionChange(id, selected) {\n  return {\n    id: id,\n    type: 'select',\n    selected: selected\n  };\n};\nfunction getSelectionChanges(items, selectedIds) {\n  return items.reduce(function (res, item) {\n    var willBeSelected = selectedIds.includes(item.id);\n    if (!item.selected && willBeSelected) {\n      item.selected = true;\n      res.push(createSelectionChange(item.id, true));\n    } else if (item.selected && !willBeSelected) {\n      item.selected = false;\n      res.push(createSelectionChange(item.id, false));\n    }\n    return res;\n  }, []);\n}\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar getHandleBounds = function getHandleBounds(selector, nodeElement, zoom) {\n  var handles = nodeElement.querySelectorAll(selector);\n  if (!handles || !handles.length) {\n    return null;\n  }\n  var handlesArray = Array.from(handles);\n  var nodeBounds = nodeElement.getBoundingClientRect();\n  return handlesArray.map(function (handle) {\n    var handleBounds = handle.getBoundingClientRect();\n    return _objectSpread$3({\n      id: handle.getAttribute('data-handleid'),\n      position: handle.getAttribute('data-handlepos'),\n      x: (handleBounds.left - nodeBounds.left) / zoom,\n      y: (handleBounds.top - nodeBounds.top) / zoom\n    }, getDimensions(handle));\n  });\n};\nfunction getMouseHandler(id, getState, handler) {\n  return handler === undefined ? handler : function (event) {\n    var node = getState().nodeInternals.get(id);\n    handler(event, _objectSpread$3({}, node));\n  };\n} // this handler is called by\n// 1. the click handler when node is not draggable or selectNodesOnDrag = false\n// or\n// 2. the on drag start handler when node is draggable and selectNodesOnDrag = true\n\nfunction handleNodeClick(_ref) {\n  var id = _ref.id,\n    store = _ref.store;\n  var _store$getState = store.getState(),\n    addSelectedNodes = _store$getState.addSelectedNodes,\n    unselectNodesAndEdges = _store$getState.unselectNodesAndEdges,\n    multiSelectionActive = _store$getState.multiSelectionActive,\n    nodeInternals = _store$getState.nodeInternals;\n  var node = nodeInternals.get(id);\n  store.setState({\n    nodesSelectionActive: false\n  });\n  if (!node.selected) {\n    addSelectedNodes([id]);\n  } else if (node.selected && multiSelectionActive) {\n    unselectNodesAndEdges({\n      nodes: [node]\n    });\n  }\n}\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar isEdge = function isEdge(element) {\n  return 'id' in element && 'source' in element && 'target' in element;\n};\nvar isNode = function isNode(element) {\n  return 'id' in element && !('source' in element) && !('target' in element);\n};\nvar getOutgoers = function getOutgoers(node, nodes, edges) {\n  if (!isNode(node)) {\n    return [];\n  }\n  var outgoerIds = edges.filter(function (e) {\n    return e.source === node.id;\n  }).map(function (e) {\n    return e.target;\n  });\n  return nodes.filter(function (n) {\n    return outgoerIds.includes(n.id);\n  });\n};\nvar getIncomers = function getIncomers(node, nodes, edges) {\n  if (!isNode(node)) {\n    return [];\n  }\n  var incomersIds = edges.filter(function (e) {\n    return e.target === node.id;\n  }).map(function (e) {\n    return e.source;\n  });\n  return nodes.filter(function (n) {\n    return incomersIds.includes(n.id);\n  });\n};\nvar getEdgeId = function getEdgeId(_ref) {\n  var source = _ref.source,\n    sourceHandle = _ref.sourceHandle,\n    target = _ref.target,\n    targetHandle = _ref.targetHandle;\n  return \"reactflow__edge-\".concat(source).concat(sourceHandle || '', \"-\").concat(target).concat(targetHandle || '');\n};\nvar getMarkerId = function getMarkerId(marker, rfId) {\n  if (typeof marker === 'undefined') {\n    return '';\n  }\n  if (typeof marker === 'string') {\n    return marker;\n  }\n  var idPrefix = rfId ? \"\".concat(rfId, \"__\") : '';\n  return \"\".concat(idPrefix).concat(Object.keys(marker).sort().map(function (key) {\n    return \"\".concat(key, \"=\").concat(marker[key]);\n  }).join('&'));\n};\nvar connectionExists = function connectionExists(edge, edges) {\n  return edges.some(function (el) {\n    return el.source === edge.source && el.target === edge.target && (el.sourceHandle === edge.sourceHandle || !el.sourceHandle && !edge.sourceHandle) && (el.targetHandle === edge.targetHandle || !el.targetHandle && !edge.targetHandle);\n  });\n};\nvar addEdge = function addEdge(edgeParams, edges) {\n  if (!edgeParams.source || !edgeParams.target) {\n    // @ts-ignore\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(\"[React Flow]: Can't create edge. An edge needs a source and a target. Help: https://reactflow.dev/error#600\");\n    }\n    return edges;\n  }\n  var edge;\n  if (isEdge(edgeParams)) {\n    edge = _objectSpread$2({}, edgeParams);\n  } else {\n    edge = _objectSpread$2(_objectSpread$2({}, edgeParams), {}, {\n      id: getEdgeId(edgeParams)\n    });\n  }\n  if (connectionExists(edge, edges)) {\n    return edges;\n  }\n  return edges.concat(edge);\n};\nvar updateEdge = function updateEdge(oldEdge, newConnection, edges) {\n  if (!newConnection.source || !newConnection.target) {\n    // @ts-ignore\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(\"[React Flow]: Can't create a new edge. An edge needs a source and a target. Help: https://reactflow.dev/error#600\");\n    }\n    return edges;\n  }\n  var foundEdge = edges.find(function (e) {\n    return e.id === oldEdge.id;\n  });\n  if (!foundEdge) {\n    // @ts-ignore\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(\"[React Flow]: The old edge with id=\".concat(oldEdge.id, \" does not exist. Help: https://reactflow.dev/error#700\"));\n    }\n    return edges;\n  } // Remove old edge and create the new edge with parameters of old edge.\n\n  var edge = _objectSpread$2(_objectSpread$2({}, oldEdge), {}, {\n    id: getEdgeId(newConnection),\n    source: newConnection.source,\n    target: newConnection.target,\n    sourceHandle: newConnection.sourceHandle,\n    targetHandle: newConnection.targetHandle\n  });\n  return edges.filter(function (e) {\n    return e.id !== oldEdge.id;\n  }).concat(edge);\n};\nvar pointToRendererPoint = function pointToRendererPoint(_ref2, _ref3, snapToGrid, _ref4) {\n  var x = _ref2.x,\n    y = _ref2.y;\n  var _ref5 = _slicedToArray(_ref3, 3),\n    tx = _ref5[0],\n    ty = _ref5[1],\n    tScale = _ref5[2];\n  var _ref6 = _slicedToArray(_ref4, 2),\n    snapX = _ref6[0],\n    snapY = _ref6[1];\n  var position = {\n    x: (x - tx) / tScale,\n    y: (y - ty) / tScale\n  };\n  if (snapToGrid) {\n    return {\n      x: snapX * Math.round(position.x / snapX),\n      y: snapY * Math.round(position.y / snapY)\n    };\n  }\n  return position;\n};\nvar getRectOfNodes = function getRectOfNodes(nodes) {\n  if (nodes.length === 0) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  var box = nodes.reduce(function (currBox, _ref7) {\n    var positionAbsolute = _ref7.positionAbsolute,\n      position = _ref7.position,\n      width = _ref7.width,\n      height = _ref7.height;\n    return getBoundsOfBoxes(currBox, rectToBox({\n      x: positionAbsolute ? positionAbsolute.x : position.x,\n      y: positionAbsolute ? positionAbsolute.y : position.y,\n      width: width || 0,\n      height: height || 0\n    }));\n  }, {\n    x: Infinity,\n    y: Infinity,\n    x2: -Infinity,\n    y2: -Infinity\n  });\n  return boxToRect(box);\n};\nvar getNodesInside = function getNodesInside(nodeInternals, rect) {\n  var _ref8 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0, 1],\n    _ref9 = _slicedToArray(_ref8, 3),\n    tx = _ref9[0],\n    ty = _ref9[1],\n    tScale = _ref9[2];\n  var partially = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var excludeNonSelectableNodes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var rBox = rectToBox({\n    x: (rect.x - tx) / tScale,\n    y: (rect.y - ty) / tScale,\n    width: rect.width / tScale,\n    height: rect.height / tScale\n  });\n  var visibleNodes = [];\n  nodeInternals.forEach(function (node) {\n    var positionAbsolute = node.positionAbsolute,\n      width = node.width,\n      height = node.height,\n      _node$selectable = node.selectable,\n      selectable = _node$selectable === void 0 ? true : _node$selectable;\n    if (excludeNonSelectableNodes && !selectable) {\n      return false;\n    }\n    var nBox = rectToBox(_objectSpread$2(_objectSpread$2({}, positionAbsolute), {}, {\n      width: width || 0,\n      height: height || 0\n    }));\n    var xOverlap = Math.max(0, Math.min(rBox.x2, nBox.x2) - Math.max(rBox.x, nBox.x));\n    var yOverlap = Math.max(0, Math.min(rBox.y2, nBox.y2) - Math.max(rBox.y, nBox.y));\n    var overlappingArea = Math.ceil(xOverlap * yOverlap);\n    var notInitialized = typeof width === 'undefined' || typeof height === 'undefined' || width === null || height === null;\n    var partiallyVisible = partially && overlappingArea > 0;\n    var area = (width || 0) * (height || 0);\n    var isVisible = notInitialized || partiallyVisible || overlappingArea >= area;\n    if (isVisible) {\n      visibleNodes.push(node);\n    }\n  });\n  return visibleNodes;\n};\nvar getConnectedEdges = function getConnectedEdges(nodes, edges) {\n  var nodeIds = nodes.map(function (node) {\n    return node.id;\n  });\n  return edges.filter(function (edge) {\n    return nodeIds.includes(edge.source) || nodeIds.includes(edge.target);\n  });\n};\nvar getTransformForBounds = function getTransformForBounds(bounds, width, height, minZoom, maxZoom) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.1;\n  var xZoom = width / (bounds.width * (1 + padding));\n  var yZoom = height / (bounds.height * (1 + padding));\n  var zoom = Math.min(xZoom, yZoom);\n  var clampedZoom = clamp(zoom, minZoom, maxZoom);\n  var boundsCenterX = bounds.x + bounds.width / 2;\n  var boundsCenterY = bounds.y + bounds.height / 2;\n  var x = width / 2 - boundsCenterX * clampedZoom;\n  var y = height / 2 - boundsCenterY * clampedZoom;\n  return [x, y, clampedZoom];\n};\nvar getD3Transition = function getD3Transition(selection) {\n  var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return selection.transition().duration(duration);\n};\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction calculateXYZPosition(node, nodeInternals, parentNodes, result) {\n  var _result$x, _parentNode$position$, _parentNode$position, _result$y, _parentNode$position$2, _parentNode$position2, _parentNode$internals, _parentNode$internals2, _result$z, _parentNode$internals3, _parentNode$internals4, _result$z2;\n  if (!node.parentNode) {\n    return result;\n  }\n  var parentNode = nodeInternals.get(node.parentNode);\n  return calculateXYZPosition(parentNode, nodeInternals, parentNodes, {\n    x: ((_result$x = result.x) !== null && _result$x !== void 0 ? _result$x : 0) + ((_parentNode$position$ = (_parentNode$position = parentNode.position) === null || _parentNode$position === void 0 ? void 0 : _parentNode$position.x) !== null && _parentNode$position$ !== void 0 ? _parentNode$position$ : 0),\n    y: ((_result$y = result.y) !== null && _result$y !== void 0 ? _result$y : 0) + ((_parentNode$position$2 = (_parentNode$position2 = parentNode.position) === null || _parentNode$position2 === void 0 ? void 0 : _parentNode$position2.y) !== null && _parentNode$position$2 !== void 0 ? _parentNode$position$2 : 0),\n    z: ((_parentNode$internals = (_parentNode$internals2 = parentNode[internalsSymbol]) === null || _parentNode$internals2 === void 0 ? void 0 : _parentNode$internals2.z) !== null && _parentNode$internals !== void 0 ? _parentNode$internals : 0) > ((_result$z = result.z) !== null && _result$z !== void 0 ? _result$z : 0) ? (_parentNode$internals3 = (_parentNode$internals4 = parentNode[internalsSymbol]) === null || _parentNode$internals4 === void 0 ? void 0 : _parentNode$internals4.z) !== null && _parentNode$internals3 !== void 0 ? _parentNode$internals3 : 0 : (_result$z2 = result.z) !== null && _result$z2 !== void 0 ? _result$z2 : 0\n  });\n}\nfunction createNodeInternals(nodes, nodeInternals) {\n  var nextNodeInternals = new Map();\n  var parentNodes = {};\n  nodes.forEach(function (node) {\n    var _currInternals$intern;\n    var z = isNumeric(node.zIndex) ? node.zIndex : node.selected ? 1000 : 0;\n    var currInternals = nodeInternals.get(node.id);\n    var internals = _objectSpread$1(_objectSpread$1({\n      width: currInternals === null || currInternals === void 0 ? void 0 : currInternals.width,\n      height: currInternals === null || currInternals === void 0 ? void 0 : currInternals.height\n    }, node), {}, {\n      positionAbsolute: {\n        x: node.position.x,\n        y: node.position.y\n      }\n    });\n    if (node.parentNode) {\n      internals.parentNode = node.parentNode;\n      parentNodes[node.parentNode] = true;\n    }\n    Object.defineProperty(internals, internalsSymbol, {\n      enumerable: false,\n      value: {\n        handleBounds: currInternals === null || currInternals === void 0 ? void 0 : (_currInternals$intern = currInternals[internalsSymbol]) === null || _currInternals$intern === void 0 ? void 0 : _currInternals$intern.handleBounds,\n        z: z\n      }\n    });\n    nextNodeInternals.set(node.id, internals);\n  });\n  nextNodeInternals.forEach(function (node) {\n    if (node.parentNode && !nextNodeInternals.has(node.parentNode)) {\n      throw new Error(\"Parent node \".concat(node.parentNode, \" not found\"));\n    }\n    if (node.parentNode || parentNodes[node.id]) {\n      var _node$internalsSymbol, _node$internalsSymbol2;\n      var _calculateXYZPosition = calculateXYZPosition(node, nextNodeInternals, parentNodes, _objectSpread$1(_objectSpread$1({}, node.position), {}, {\n          z: (_node$internalsSymbol = (_node$internalsSymbol2 = node[internalsSymbol]) === null || _node$internalsSymbol2 === void 0 ? void 0 : _node$internalsSymbol2.z) !== null && _node$internalsSymbol !== void 0 ? _node$internalsSymbol : 0\n        })),\n        x = _calculateXYZPosition.x,\n        y = _calculateXYZPosition.y,\n        z = _calculateXYZPosition.z;\n      node.positionAbsolute = {\n        x: x,\n        y: y\n      };\n      node[internalsSymbol].z = z;\n      if (parentNodes[node.id]) {\n        node[internalsSymbol].isParent = true;\n      }\n    }\n  });\n  return nextNodeInternals;\n}\nfunction fitView(get) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _get = get(),\n    nodeInternals = _get.nodeInternals,\n    width = _get.width,\n    height = _get.height,\n    minZoom = _get.minZoom,\n    maxZoom = _get.maxZoom,\n    d3Zoom = _get.d3Zoom,\n    d3Selection = _get.d3Selection,\n    fitViewOnInitDone = _get.fitViewOnInitDone,\n    fitViewOnInit = _get.fitViewOnInit;\n  if (options.initial && !fitViewOnInitDone && fitViewOnInit || !options.initial) {\n    if (d3Zoom && d3Selection) {\n      var nodes = Array.from(nodeInternals.values()).filter(function (n) {\n        return options.includeHiddenNodes ? n.width && n.height : !n.hidden;\n      });\n      var nodesInitialized = nodes.every(function (n) {\n        return n.width && n.height;\n      });\n      if (nodes.length > 0 && nodesInitialized) {\n        var _options$minZoom, _options$maxZoom, _options$padding;\n        var bounds = getRectOfNodes(nodes);\n        var _getTransformForBound = getTransformForBounds(bounds, width, height, (_options$minZoom = options.minZoom) !== null && _options$minZoom !== void 0 ? _options$minZoom : minZoom, (_options$maxZoom = options.maxZoom) !== null && _options$maxZoom !== void 0 ? _options$maxZoom : maxZoom, (_options$padding = options.padding) !== null && _options$padding !== void 0 ? _options$padding : 0.1),\n          _getTransformForBound2 = _slicedToArray(_getTransformForBound, 3),\n          x = _getTransformForBound2[0],\n          y = _getTransformForBound2[1],\n          zoom = _getTransformForBound2[2];\n        var nextTransform = zoomIdentity.translate(x, y).scale(zoom);\n        if (typeof options.duration === 'number' && options.duration > 0) {\n          d3Zoom.transform(getD3Transition(d3Selection, options.duration), nextTransform);\n        } else {\n          d3Zoom.transform(d3Selection, nextTransform);\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction handleControlledNodeSelectionChange(nodeChanges, nodeInternals) {\n  nodeChanges.forEach(function (change) {\n    var node = nodeInternals.get(change.id);\n    if (node) {\n      var _objectSpread2;\n      nodeInternals.set(node.id, _objectSpread$1(_objectSpread$1({}, node), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, internalsSymbol, node[internalsSymbol]), _defineProperty(_objectSpread2, \"selected\", change.selected), _objectSpread2)));\n    }\n  });\n  return new Map(nodeInternals);\n}\nfunction handleControlledEdgeSelectionChange(edgeChanges, edges) {\n  return edges.map(function (e) {\n    var change = edgeChanges.find(function (change) {\n      return change.id === e.id;\n    });\n    if (change) {\n      e.selected = change.selected;\n    }\n    return e;\n  });\n}\nfunction updateNodesAndEdgesSelections(_ref) {\n  var changedNodes = _ref.changedNodes,\n    changedEdges = _ref.changedEdges,\n    get = _ref.get,\n    set = _ref.set;\n  var _get2 = get(),\n    nodeInternals = _get2.nodeInternals,\n    edges = _get2.edges,\n    onNodesChange = _get2.onNodesChange,\n    onEdgesChange = _get2.onEdgesChange,\n    hasDefaultNodes = _get2.hasDefaultNodes,\n    hasDefaultEdges = _get2.hasDefaultEdges;\n  if (changedNodes !== null && changedNodes !== void 0 && changedNodes.length) {\n    if (hasDefaultNodes) {\n      set({\n        nodeInternals: handleControlledNodeSelectionChange(changedNodes, nodeInternals)\n      });\n    }\n    onNodesChange === null || onNodesChange === void 0 ? void 0 : onNodesChange(changedNodes);\n  }\n  if (changedEdges !== null && changedEdges !== void 0 && changedEdges.length) {\n    if (hasDefaultEdges) {\n      set({\n        edges: handleControlledEdgeSelectionChange(changedEdges, edges)\n      });\n    }\n    onEdgesChange === null || onEdgesChange === void 0 ? void 0 : onEdgesChange(changedEdges);\n  }\n}\nvar infiniteExtent = [[Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY], [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY]];\nvar initialState = {\n  width: 0,\n  height: 0,\n  transform: [0, 0, 1],\n  nodeInternals: new Map(),\n  edges: [],\n  onNodesChange: null,\n  onEdgesChange: null,\n  hasDefaultNodes: false,\n  hasDefaultEdges: false,\n  d3Zoom: null,\n  d3Selection: null,\n  d3ZoomHandler: undefined,\n  minZoom: 0.5,\n  maxZoom: 2,\n  translateExtent: infiniteExtent,\n  nodeExtent: infiniteExtent,\n  nodesSelectionActive: false,\n  userSelectionActive: false,\n  connectionNodeId: null,\n  connectionHandleId: null,\n  connectionHandleType: 'source',\n  connectionPosition: {\n    x: 0,\n    y: 0\n  },\n  connectionMode: ConnectionMode.Strict,\n  domNode: null,\n  snapGrid: [15, 15],\n  snapToGrid: false,\n  nodesDraggable: true,\n  nodesConnectable: true,\n  elementsSelectable: true,\n  fitViewOnInit: false,\n  fitViewOnInitDone: false,\n  fitViewOnInitOptions: undefined,\n  multiSelectionActive: false,\n  reactFlowVersion: \"10.3.17\",\n  connectionStartHandle: null,\n  connectOnClick: true\n};\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar _createContext = createContext(),\n  Provider = _createContext.Provider,\n  useStore = _createContext.useStore,\n  useStoreApi = _createContext.useStoreApi;\nvar createStore = function createStore() {\n  return create(function (set, get) {\n    return _objectSpread(_objectSpread({}, initialState), {}, {\n      setNodes: function setNodes(nodes) {\n        set({\n          nodeInternals: createNodeInternals(nodes, get().nodeInternals)\n        });\n      },\n      setEdges: function setEdges(edges) {\n        var _get = get(),\n          _get$defaultEdgeOptio = _get.defaultEdgeOptions,\n          defaultEdgeOptions = _get$defaultEdgeOptio === void 0 ? {} : _get$defaultEdgeOptio;\n        set({\n          edges: edges.map(function (e) {\n            return _objectSpread(_objectSpread({}, defaultEdgeOptions), e);\n          })\n        });\n      },\n      setDefaultNodesAndEdges: function setDefaultNodesAndEdges(nodes, edges) {\n        var hasDefaultNodes = typeof nodes !== 'undefined';\n        var hasDefaultEdges = typeof edges !== 'undefined';\n        var nodeInternals = hasDefaultNodes ? createNodeInternals(nodes, new Map()) : new Map();\n        var nextEdges = hasDefaultEdges ? edges : [];\n        set({\n          nodeInternals: nodeInternals,\n          edges: nextEdges,\n          hasDefaultNodes: hasDefaultNodes,\n          hasDefaultEdges: hasDefaultEdges\n        });\n      },\n      updateNodeDimensions: function updateNodeDimensions(updates) {\n        var _get2 = get(),\n          onNodesChange = _get2.onNodesChange,\n          nodeInternals = _get2.nodeInternals,\n          fitViewOnInit = _get2.fitViewOnInit,\n          fitViewOnInitDone = _get2.fitViewOnInitDone,\n          fitViewOnInitOptions = _get2.fitViewOnInitOptions,\n          domNode = _get2.domNode;\n        var viewportNode = domNode === null || domNode === void 0 ? void 0 : domNode.querySelector('.react-flow__viewport');\n        if (!viewportNode) {\n          return;\n        }\n        var style = window.getComputedStyle(viewportNode);\n        var _window$DOMMatrixRead = new window.DOMMatrixReadOnly(style.transform),\n          zoom = _window$DOMMatrixRead.m22;\n        var changes = updates.reduce(function (res, update) {\n          var node = nodeInternals.get(update.id);\n          if (node) {\n            var dimensions = getDimensions(update.nodeElement);\n            var doUpdate = !!(dimensions.width && dimensions.height && (node.width !== dimensions.width || node.height !== dimensions.height || update.forceUpdate));\n            if (doUpdate) {\n              nodeInternals.set(node.id, _objectSpread(_objectSpread({}, node), {}, _defineProperty({}, internalsSymbol, _objectSpread(_objectSpread({}, node[internalsSymbol]), {}, {\n                handleBounds: {\n                  source: getHandleBounds('.source', update.nodeElement, zoom),\n                  target: getHandleBounds('.target', update.nodeElement, zoom)\n                }\n              })), dimensions));\n              res.push({\n                id: node.id,\n                type: 'dimensions',\n                dimensions: dimensions\n              });\n            }\n          }\n          return res;\n        }, []);\n        var nextFitViewOnInitDone = fitViewOnInitDone || fitViewOnInit && !fitViewOnInitDone && fitView(get, _objectSpread({\n          initial: true\n        }, fitViewOnInitOptions));\n        set({\n          nodeInternals: new Map(nodeInternals),\n          fitViewOnInitDone: nextFitViewOnInitDone\n        });\n        if ((changes === null || changes === void 0 ? void 0 : changes.length) > 0) {\n          onNodesChange === null || onNodesChange === void 0 ? void 0 : onNodesChange(changes);\n        }\n      },\n      updateNodePositions: function updateNodePositions(nodeDragItems) {\n        var positionChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var dragging = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var _get3 = get(),\n          onNodesChange = _get3.onNodesChange,\n          nodeInternals = _get3.nodeInternals,\n          hasDefaultNodes = _get3.hasDefaultNodes;\n        if (hasDefaultNodes || onNodesChange) {\n          var changes = nodeDragItems.map(function (node) {\n            var change = {\n              id: node.id,\n              type: 'position',\n              dragging: dragging\n            };\n            if (positionChanged) {\n              change.positionAbsolute = node.positionAbsolute;\n              change.position = node.position;\n            }\n            return change;\n          });\n          if (changes !== null && changes !== void 0 && changes.length) {\n            if (hasDefaultNodes) {\n              var nodes = applyNodeChanges(changes, Array.from(nodeInternals.values()));\n              var nextNodeInternals = createNodeInternals(nodes, nodeInternals);\n              set({\n                nodeInternals: nextNodeInternals\n              });\n            }\n            onNodesChange === null || onNodesChange === void 0 ? void 0 : onNodesChange(changes);\n          }\n        }\n      },\n      addSelectedNodes: function addSelectedNodes(selectedNodeIds) {\n        var _get4 = get(),\n          multiSelectionActive = _get4.multiSelectionActive,\n          nodeInternals = _get4.nodeInternals,\n          edges = _get4.edges;\n        var changedNodes;\n        var changedEdges = null;\n        if (multiSelectionActive) {\n          changedNodes = selectedNodeIds.map(function (nodeId) {\n            return createSelectionChange(nodeId, true);\n          });\n        } else {\n          changedNodes = getSelectionChanges(Array.from(nodeInternals.values()), selectedNodeIds);\n          changedEdges = getSelectionChanges(edges, []);\n        }\n        updateNodesAndEdgesSelections({\n          changedNodes: changedNodes,\n          changedEdges: changedEdges,\n          get: get,\n          set: set\n        });\n      },\n      addSelectedEdges: function addSelectedEdges(selectedEdgeIds) {\n        var _get5 = get(),\n          multiSelectionActive = _get5.multiSelectionActive,\n          edges = _get5.edges,\n          nodeInternals = _get5.nodeInternals;\n        var changedEdges;\n        var changedNodes = null;\n        if (multiSelectionActive) {\n          changedEdges = selectedEdgeIds.map(function (edgeId) {\n            return createSelectionChange(edgeId, true);\n          });\n        } else {\n          changedEdges = getSelectionChanges(edges, selectedEdgeIds);\n          changedNodes = getSelectionChanges(Array.from(nodeInternals.values()), []);\n        }\n        updateNodesAndEdgesSelections({\n          changedNodes: changedNodes,\n          changedEdges: changedEdges,\n          get: get,\n          set: set\n        });\n      },\n      unselectNodesAndEdges: function unselectNodesAndEdges() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          nodes = _ref.nodes,\n          edges = _ref.edges;\n        var _get6 = get(),\n          nodeInternals = _get6.nodeInternals,\n          storeEdges = _get6.edges;\n        var nodesToUnselect = nodes ? nodes : Array.from(nodeInternals.values());\n        var edgesToUnselect = edges ? edges : storeEdges;\n        var changedNodes = nodesToUnselect.map(function (n) {\n          n.selected = false;\n          return createSelectionChange(n.id, false);\n        });\n        var changedEdges = edgesToUnselect.map(function (edge) {\n          return createSelectionChange(edge.id, false);\n        });\n        updateNodesAndEdgesSelections({\n          changedNodes: changedNodes,\n          changedEdges: changedEdges,\n          get: get,\n          set: set\n        });\n      },\n      setMinZoom: function setMinZoom(minZoom) {\n        var _get7 = get(),\n          d3Zoom = _get7.d3Zoom,\n          maxZoom = _get7.maxZoom;\n        d3Zoom === null || d3Zoom === void 0 ? void 0 : d3Zoom.scaleExtent([minZoom, maxZoom]);\n        set({\n          minZoom: minZoom\n        });\n      },\n      setMaxZoom: function setMaxZoom(maxZoom) {\n        var _get8 = get(),\n          d3Zoom = _get8.d3Zoom,\n          minZoom = _get8.minZoom;\n        d3Zoom === null || d3Zoom === void 0 ? void 0 : d3Zoom.scaleExtent([minZoom, maxZoom]);\n        set({\n          maxZoom: maxZoom\n        });\n      },\n      setTranslateExtent: function setTranslateExtent(translateExtent) {\n        var _get9 = get(),\n          d3Zoom = _get9.d3Zoom;\n        d3Zoom === null || d3Zoom === void 0 ? void 0 : d3Zoom.translateExtent(translateExtent);\n        set({\n          translateExtent: translateExtent\n        });\n      },\n      resetSelectedElements: function resetSelectedElements() {\n        var _get10 = get(),\n          nodeInternals = _get10.nodeInternals,\n          edges = _get10.edges;\n        var nodes = Array.from(nodeInternals.values());\n        var nodesToUnselect = nodes.filter(function (e) {\n          return e.selected;\n        }).map(function (n) {\n          return createSelectionChange(n.id, false);\n        });\n        var edgesToUnselect = edges.filter(function (e) {\n          return e.selected;\n        }).map(function (e) {\n          return createSelectionChange(e.id, false);\n        });\n        updateNodesAndEdgesSelections({\n          changedNodes: nodesToUnselect,\n          changedEdges: edgesToUnselect,\n          get: get,\n          set: set\n        });\n      },\n      setNodeExtent: function setNodeExtent(nodeExtent) {\n        var _get11 = get(),\n          nodeInternals = _get11.nodeInternals;\n        nodeInternals.forEach(function (node) {\n          node.positionAbsolute = clampPosition(node.position, nodeExtent);\n        });\n        set({\n          nodeExtent: nodeExtent,\n          nodeInternals: new Map(nodeInternals)\n        });\n      },\n      reset: function reset() {\n        return set(_objectSpread({}, initialState));\n      }\n    });\n  });\n};\nexport { isNode as A, isEdge as B, ConnectionMode as C, getOutgoers as D, getIncomers as E, updateEdge as F, getTransformForBounds as G, BackgroundVariant as H, getBoundsofRects as I, _arrayLikeToArray as J, _unsupportedIterableToArray as K, getD3Transition as L, MarkerType as M, fitView as N, Position as P, _slicedToArray as _, _defineProperty as a, useStore as b, addEdge as c, getMarkerId as d, getConnectedEdges as e, getDimensions as f, getHostForElement as g, PanOnScrollMode as h, internalsSymbol as i, clamp as j, getNodesInside as k, getSelectionChanges as l, clampPosition as m, handleNodeClick as n, getRectOfNodes as o, pointToRendererPoint as p, ConnectionLineType as q, rectToBox as r, isNumeric as s, getMouseHandler as t, useStoreApi as u, Provider as v, createStore as w, infiniteExtent as x, applyNodeChanges as y, applyEdgeChanges as z };","map":{"version":3,"mappings":"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","names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_arrayLikeToArray","arr","len","length","i","arr2","Array","_unsupportedIterableToArray","o","minLen","arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","from","test","_arrayWithHoles","isArray","_iterableToArrayLimit","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","err","_nonIterableRest","TypeError","_slicedToArray","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest"],"sources":["C:\\Users\\barun\\OneDrive\\Documents\\btp\\chatbot\\client\\node_modules\\react-flow-renderer\\node_modules\\@babel\\runtime\\helpers\\esm\\defineProperty.js","C:\\Users\\barun\\OneDrive\\Documents\\btp\\chatbot\\client\\node_modules\\react-flow-renderer\\node_modules\\@babel\\runtime\\helpers\\esm\\arrayLikeToArray.js","C:\\Users\\barun\\OneDrive\\Documents\\btp\\chatbot\\client\\node_modules\\react-flow-renderer\\node_modules\\@babel\\runtime\\helpers\\esm\\unsupportedIterableToArray.js","C:\\Users\\barun\\OneDrive\\Documents\\btp\\chatbot\\client\\node_modules\\react-flow-renderer\\node_modules\\@babel\\runtime\\helpers\\esm\\arrayWithHoles.js","C:\\Users\\barun\\OneDrive\\Documents\\btp\\chatbot\\client\\node_modules\\react-flow-renderer\\node_modules\\@babel\\runtime\\helpers\\esm\\iterableToArrayLimit.js","C:\\Users\\barun\\OneDrive\\Documents\\btp\\chatbot\\client\\node_modules\\react-flow-renderer\\node_modules\\@babel\\runtime\\helpers\\esm\\nonIterableRest.js","C:\\Users\\barun\\OneDrive\\Documents\\btp\\chatbot\\client\\node_modules\\react-flow-renderer\\node_modules\\@babel\\runtime\\helpers\\esm\\slicedToArray.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}