{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMarkerSize = getMarkerSize;\nexports.getMarkerId = void 0;\nvar _marker = require(\"./marker.const\");\nvar _graph = _interopRequireDefault(require(\"../graph/graph.const\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\n/**\n * @module Marker/helper\n * @description\n * Offers a series of methods to compute proper markers within a given context.\n */\n\n/**\n * This function is a key template builder to access MARKERS structure.\n * @param {string} size - string that indicates size of marker.\n * @param {string} highlighted - string that indicates highlight state of marker.\n * @returns {string} the key of the marker.\n * @memberof Marker/helper\n */\nfunction _markerKeyBuilder(size, highlighted) {\n  return \"MARKER_\".concat(size).concat(highlighted);\n}\n/**\n * This functions returns the proper marker size given the inputs that describe the scenario\n * where the marker is to be applied.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {number} mMax - a derived value from the max zoom config.\n * @param {number} lMax - a derived value from the min zoom config.\n * @returns {string} the size.\n * @memberof Marker/helper\n */\n\nfunction _getMarkerSize(transform, mMax, lMax) {\n  if (transform < mMax) {\n    return _marker.SIZES.S;\n  } else if (transform >= mMax && transform < lMax) {\n    return _marker.SIZES.M;\n  } else {\n    return _marker.SIZES.L;\n  }\n}\n/**\n * This function holds logic to retrieve the appropriate marker id that reflects the input\n * parameters, markers can vary with highlight and transform value.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @returns {string} the id of the result marker.\n * @memberof Marker/helper\n */\n\nfunction _computeMarkerId(highlight, transform, _ref) {\n  var maxZoom = _ref.maxZoom;\n  var mMax = maxZoom / 4;\n  var lMax = maxZoom / 2;\n  var size = _getMarkerSize(transform, mMax, lMax);\n  var highlighted = highlight ? _marker.HIGHLIGHTED : \"\";\n  var markerKey = _markerKeyBuilder(size, highlighted);\n  return _marker.MARKERS[markerKey];\n}\n/**\n * This function memoize results for _computeMarkerId\n * since many of the times user will be playing around with the same zoom\n * factor, we can take advantage of this and cache the results for a\n * given combination of highlight state, zoom transform value and maxZoom config.\n * @returns{Function} memoize wrapper to the _computeMarkerId operation.\n * @memberof Marker/helper\n */\n\nfunction _memoizedComputeMarkerId() {\n  var cache = {};\n  return function (highlight, transform, _ref2) {\n    var maxZoom = _ref2.maxZoom;\n    var cacheKey = \"\".concat(highlight, \";\").concat(transform, \";\").concat(maxZoom);\n    if (cache[cacheKey]) {\n      return cache[cacheKey];\n    }\n    var markerId = _computeMarkerId(highlight, transform, {\n      maxZoom: maxZoom\n    });\n    cache[cacheKey] = markerId;\n    return markerId;\n  };\n}\n/**\n * Memoized reference for _memoizedComputeMarkerId exposed\n * as getter for sake of readability.\n * Gets proper marker id given the highlight state and the zoom\n * transform.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @param {Object} config.maxZoom - max zoom that can be performed against the graph.\n * @memberof Marker/helper\n */\n\nvar getMarkerId = _memoizedComputeMarkerId();\n/**\n * Computes the three marker sizes\n * For supported shapes in {@link Graph/helper/getNormalizedNodeCoordinates}, the function should return 0,\n * to be able to control more accurately nodes and arrows sizes and positions in directional graphs.\n * @param {Object} config - the graph config object.\n * @returns {Object} size of markers\n * @memberof Marker/helper\n */\n\nexports.getMarkerId = getMarkerId;\nfunction getMarkerSize(config) {\n  var small = _marker.MARKER_SMALL_SIZE;\n  var medium = small + _marker.MARKER_MEDIUM_OFFSET * config.maxZoom / 3;\n  var large = small + _marker.MARKER_LARGE_OFFSET * config.maxZoom / 3;\n  if (config.node && !config.node.viewGenerator) {\n    switch (config.node.symbolType) {\n      case _graph[\"default\"].SYMBOLS.CIRCLE:\n        small = 0;\n        medium = 0;\n        large = 0;\n        break;\n    }\n  }\n  return {\n    small: small,\n    medium: medium,\n    large: large\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getMarkerSize","getMarkerId","_marker","require","_graph","_interopRequireDefault","obj","__esModule","_markerKeyBuilder","size","highlighted","concat","_getMarkerSize","transform","mMax","lMax","SIZES","S","M","L","_computeMarkerId","highlight","_ref","maxZoom","HIGHLIGHTED","markerKey","MARKERS","_memoizedComputeMarkerId","cache","_ref2","cacheKey","markerId","config","small","MARKER_SMALL_SIZE","medium","MARKER_MEDIUM_OFFSET","large","MARKER_LARGE_OFFSET","node","viewGenerator","symbolType","SYMBOLS","CIRCLE"],"sources":["C:/Users/barun/OneDrive/Documents/btp/chatbot/client/node_modules/react-d3-graph/lib/components/marker/marker.helper.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMarkerSize = getMarkerSize;\nexports.getMarkerId = void 0;\n\nvar _marker = require(\"./marker.const\");\n\nvar _graph = _interopRequireDefault(require(\"../graph/graph.const\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * @module Marker/helper\n * @description\n * Offers a series of methods to compute proper markers within a given context.\n */\n\n/**\n * This function is a key template builder to access MARKERS structure.\n * @param {string} size - string that indicates size of marker.\n * @param {string} highlighted - string that indicates highlight state of marker.\n * @returns {string} the key of the marker.\n * @memberof Marker/helper\n */\nfunction _markerKeyBuilder(size, highlighted) {\n  return \"MARKER_\".concat(size).concat(highlighted);\n}\n/**\n * This functions returns the proper marker size given the inputs that describe the scenario\n * where the marker is to be applied.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {number} mMax - a derived value from the max zoom config.\n * @param {number} lMax - a derived value from the min zoom config.\n * @returns {string} the size.\n * @memberof Marker/helper\n */\n\n\nfunction _getMarkerSize(transform, mMax, lMax) {\n  if (transform < mMax) {\n    return _marker.SIZES.S;\n  } else if (transform >= mMax && transform < lMax) {\n    return _marker.SIZES.M;\n  } else {\n    return _marker.SIZES.L;\n  }\n}\n/**\n * This function holds logic to retrieve the appropriate marker id that reflects the input\n * parameters, markers can vary with highlight and transform value.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @returns {string} the id of the result marker.\n * @memberof Marker/helper\n */\n\n\nfunction _computeMarkerId(highlight, transform, _ref) {\n  var maxZoom = _ref.maxZoom;\n  var mMax = maxZoom / 4;\n  var lMax = maxZoom / 2;\n\n  var size = _getMarkerSize(transform, mMax, lMax);\n\n  var highlighted = highlight ? _marker.HIGHLIGHTED : \"\";\n\n  var markerKey = _markerKeyBuilder(size, highlighted);\n\n  return _marker.MARKERS[markerKey];\n}\n/**\n * This function memoize results for _computeMarkerId\n * since many of the times user will be playing around with the same zoom\n * factor, we can take advantage of this and cache the results for a\n * given combination of highlight state, zoom transform value and maxZoom config.\n * @returns{Function} memoize wrapper to the _computeMarkerId operation.\n * @memberof Marker/helper\n */\n\n\nfunction _memoizedComputeMarkerId() {\n  var cache = {};\n  return function (highlight, transform, _ref2) {\n    var maxZoom = _ref2.maxZoom;\n    var cacheKey = \"\".concat(highlight, \";\").concat(transform, \";\").concat(maxZoom);\n\n    if (cache[cacheKey]) {\n      return cache[cacheKey];\n    }\n\n    var markerId = _computeMarkerId(highlight, transform, {\n      maxZoom: maxZoom\n    });\n\n    cache[cacheKey] = markerId;\n    return markerId;\n  };\n}\n/**\n * Memoized reference for _memoizedComputeMarkerId exposed\n * as getter for sake of readability.\n * Gets proper marker id given the highlight state and the zoom\n * transform.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @param {Object} config.maxZoom - max zoom that can be performed against the graph.\n * @memberof Marker/helper\n */\n\n\nvar getMarkerId = _memoizedComputeMarkerId();\n/**\n * Computes the three marker sizes\n * For supported shapes in {@link Graph/helper/getNormalizedNodeCoordinates}, the function should return 0,\n * to be able to control more accurately nodes and arrows sizes and positions in directional graphs.\n * @param {Object} config - the graph config object.\n * @returns {Object} size of markers\n * @memberof Marker/helper\n */\n\n\nexports.getMarkerId = getMarkerId;\n\nfunction getMarkerSize(config) {\n  var small = _marker.MARKER_SMALL_SIZE;\n  var medium = small + _marker.MARKER_MEDIUM_OFFSET * config.maxZoom / 3;\n  var large = small + _marker.MARKER_LARGE_OFFSET * config.maxZoom / 3;\n\n  if (config.node && !config.node.viewGenerator) {\n    switch (config.node.symbolType) {\n      case _graph[\"default\"].SYMBOLS.CIRCLE:\n        small = 0;\n        medium = 0;\n        large = 0;\n        break;\n    }\n  }\n\n  return {\n    small: small,\n    medium: medium,\n    large: large\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}