{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barun\\\\OneDrive\\\\Documents\\\\btp\\\\chatbot\\\\client\\\\src\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// const Dropdown = ({ options }) => {\n//   const [selectedOption, setSelectedOption] = useState(\"\");\n\n//   const handleOptionSelect = (option) => {\n//     setSelectedOption(option);\n//     window.location.href = option.url; // redirect to the selected option's URL\n//   };\n\n//   return (\n//     <div>\n//       <select value={selectedOption} onChange={(e) => handleOptionSelect(options.find(option => option.label === e.target.value))}>\n//         <option value=\"\">Select an option</option>\n//         {options.map((option) => (\n//           <option key={option.label} value={option.label}>\n//             {option.label}\n//           </option>\n//         ))}\n//       </select>\n//     </div>\n//   );\n// };\nimport ReactFlowRenderer from \"./graphs/ReactFlowRenderer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dropdown = _ref => {\n  _s();\n  let {\n    options\n  } = _ref;\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleOptionSelect = async option => {\n    setSelectedOption(option.label);\n    setIsLoading(true);\n    try {\n      const response = await fetch(`http://localhost:5001/graphapi`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"label\": option.label\n        })\n      });\n      const data = await response.json();\n      setData(data);\n    } catch (error) {\n      console.error(error);\n    }\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedOption,\n      onChange: e => handleOptionSelect(options.find(option => option.label === e.target.value)),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select an option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.label,\n        children: option.label\n      }, option.label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: JSON.stringify(data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlowRenderer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Dropdown, \"5od41mMo8GDCLYY22WCS+TFbc9I=\");\n_c = Dropdown;\nexport default Dropdown;\nvar _c;\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"names":["React","useState","ReactFlowRenderer","Dropdown","options","selectedOption","setSelectedOption","data","setData","isLoading","setIsLoading","handleOptionSelect","option","label","response","fetch","method","headers","body","JSON","stringify","json","error","console","e","find","target","value","map"],"sources":["C:/Users/barun/OneDrive/Documents/btp/chatbot/client/src/graph.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// const Dropdown = ({ options }) => {\r\n//   const [selectedOption, setSelectedOption] = useState(\"\");\r\n\r\n//   const handleOptionSelect = (option) => {\r\n//     setSelectedOption(option);\r\n//     window.location.href = option.url; // redirect to the selected option's URL\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <select value={selectedOption} onChange={(e) => handleOptionSelect(options.find(option => option.label === e.target.value))}>\r\n//         <option value=\"\">Select an option</option>\r\n//         {options.map((option) => (\r\n//           <option key={option.label} value={option.label}>\r\n//             {option.label}\r\n//           </option>\r\n//         ))}\r\n//       </select>\r\n//     </div>\r\n//   );\r\n// };\r\nimport ReactFlowRenderer from \"./graphs/ReactFlowRenderer\";\r\n\r\n\r\nconst Dropdown = ({ options }) => {\r\n  const [selectedOption, setSelectedOption] = useState(\"\");\r\n  const [data, setData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleOptionSelect = async (option) => {\r\n    setSelectedOption(option.label);\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:5001/graphapi`, {\r\n        method:'POST',\r\n        headers : {\r\n          'Accept' :'application/json',\r\n          'Content-Type' : 'application/json'\r\n        },\r\n        body : JSON.stringify({\r\n          \"label\": option.label\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      setData(data);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <select\r\n        value={selectedOption}\r\n        onChange={(e) =>\r\n          handleOptionSelect(\r\n            options.find((option) => option.label === e.target.value)\r\n          )\r\n        }\r\n      >\r\n        <option value=\"\">Select an option</option>\r\n        {options.map((option) => (\r\n          <option key={option.label} value={option.label}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {isLoading && <div>Loading...</div>}\r\n      {data && <div>{JSON.stringify(data)}</div>}\r\n    \r\n      <ReactFlowRenderer /> \r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOC,iBAAiB,MAAM,4BAA4B;AAAC;AAG3D,MAAMC,QAAQ,GAAG,QAAiB;EAAA;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EAC3B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMU,kBAAkB,GAAG,MAAOC,MAAM,IAAK;IAC3CN,iBAAiB,CAACM,MAAM,CAACC,KAAK,CAAC;IAC/BH,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAA+B,EAAE;QAC7DC,MAAM,EAAC,MAAM;QACbC,OAAO,EAAG;UACR,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAG;QACnB,CAAC;QACDC,IAAI,EAAGC,IAAI,CAACC,SAAS,CAAC;UACpB,OAAO,EAAER,MAAM,CAACC;QAClB,CAAC;MACH,CAAC,CAAC;MACF,MAAMN,IAAI,GAAG,MAAMO,QAAQ,CAACO,IAAI,EAAE;MAClCb,OAAO,CAACD,IAAI,CAAC;IACf,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;IAEAZ,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,oBACE;IAAA,wBACE;MACE,KAAK,EAAEL,cAAe;MACtB,QAAQ,EAAGmB,CAAC,IACVb,kBAAkB,CAChBP,OAAO,CAACqB,IAAI,CAAEb,MAAM,IAAKA,MAAM,CAACC,KAAK,KAAKW,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAE5D;MAAA,wBAED;QAAQ,KAAK,EAAC,EAAE;QAAA,UAAC;MAAgB;QAAA;QAAA;QAAA;MAAA,QAAS,EACzCvB,OAAO,CAACwB,GAAG,CAAEhB,MAAM,iBAClB;QAA2B,KAAK,EAAEA,MAAM,CAACC,KAAM;QAAA,UAC5CD,MAAM,CAACC;MAAK,GADFD,MAAM,CAACC,KAAK;QAAA;QAAA;QAAA;MAAA,QAG1B,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QACK,EACRJ,SAAS,iBAAI;MAAA,UAAK;IAAU;MAAA;MAAA;MAAA;IAAA,QAAM,EAClCF,IAAI,iBAAI;MAAA,UAAMY,IAAI,CAACC,SAAS,CAACb,IAAI;IAAC;MAAA;MAAA;MAAA;IAAA,QAAO,eAE1C,QAAC,iBAAiB;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAEjB;AAEV,CAAC;AAAC,GArDIJ,QAAQ;AAAA,KAARA,QAAQ;AAuDd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}