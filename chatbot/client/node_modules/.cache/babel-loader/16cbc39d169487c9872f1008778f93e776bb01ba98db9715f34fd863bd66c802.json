{"ast":null,"code":"const t = t => \"object\" == typeof t && null != t && 1 === t.nodeType,\n  e = (t, e) => (!e || \"hidden\" !== t) && \"visible\" !== t && \"clip\" !== t,\n  n = (t, n) => {\n    if (t.clientHeight < t.scrollHeight || t.clientWidth < t.scrollWidth) {\n      const o = getComputedStyle(t, null);\n      return e(o.overflowY, n) || e(o.overflowX, n) || (t => {\n        const e = (t => {\n          if (!t.ownerDocument || !t.ownerDocument.defaultView) return null;\n          try {\n            return t.ownerDocument.defaultView.frameElement;\n          } catch (t) {\n            return null;\n          }\n        })(t);\n        return !!e && (e.clientHeight < t.scrollHeight || e.clientWidth < t.scrollWidth);\n      })(t);\n    }\n    return !1;\n  },\n  o = (t, e, n, o, i, l, r, d) => l < t && r > e || l > t && r < e ? 0 : l <= t && d <= n || r >= e && d >= n ? l - t - o : r > e && d < n || l < t && d > n ? r - e + i : 0,\n  i = t => {\n    const e = t.parentElement;\n    return null == e ? t.getRootNode().host || null : e;\n  },\n  l = (e, l) => {\n    var r, d, s, h;\n    if (\"undefined\" == typeof document) return [];\n    const {\n        scrollMode: c,\n        block: f,\n        inline: u,\n        boundary: a,\n        skipOverflowHiddenElements: g\n      } = l,\n      m = \"function\" == typeof a ? a : t => t !== a;\n    if (!t(e)) throw new TypeError(\"Invalid target\");\n    const p = document.scrollingElement || document.documentElement,\n      w = [];\n    let W = e;\n    for (; t(W) && m(W);) {\n      if (W = i(W), W === p) {\n        w.push(W);\n        break;\n      }\n      null != W && W === document.body && n(W) && !n(document.documentElement) || null != W && n(W, g) && w.push(W);\n    }\n    const H = null != (d = null == (r = window.visualViewport) ? void 0 : r.width) ? d : innerWidth,\n      b = null != (h = null == (s = window.visualViewport) ? void 0 : s.height) ? h : innerHeight,\n      {\n        scrollX: v,\n        scrollY: y\n      } = window,\n      {\n        height: E,\n        width: M,\n        top: x,\n        right: I,\n        bottom: C,\n        left: R\n      } = e.getBoundingClientRect();\n    let T = \"start\" === f || \"nearest\" === f ? x : \"end\" === f ? C : x + E / 2,\n      V = \"center\" === u ? R + M / 2 : \"end\" === u ? I : R;\n    const k = [];\n    for (let t = 0; t < w.length; t++) {\n      const e = w[t],\n        {\n          height: n,\n          width: i,\n          top: l,\n          right: r,\n          bottom: d,\n          left: s\n        } = e.getBoundingClientRect();\n      if (\"if-needed\" === c && x >= 0 && R >= 0 && C <= b && I <= H && x >= l && C <= d && R >= s && I <= r) return k;\n      const h = getComputedStyle(e),\n        a = parseInt(h.borderLeftWidth, 10),\n        g = parseInt(h.borderTopWidth, 10),\n        m = parseInt(h.borderRightWidth, 10),\n        W = parseInt(h.borderBottomWidth, 10);\n      let B = 0,\n        D = 0;\n      const L = \"offsetWidth\" in e ? e.offsetWidth - e.clientWidth - a - m : 0,\n        S = \"offsetHeight\" in e ? e.offsetHeight - e.clientHeight - g - W : 0,\n        X = \"offsetWidth\" in e ? 0 === e.offsetWidth ? 0 : i / e.offsetWidth : 0,\n        Y = \"offsetHeight\" in e ? 0 === e.offsetHeight ? 0 : n / e.offsetHeight : 0;\n      if (p === e) B = \"start\" === f ? T : \"end\" === f ? T - b : \"nearest\" === f ? o(y, y + b, b, g, W, y + T, y + T + E, E) : T - b / 2, D = \"start\" === u ? V : \"center\" === u ? V - H / 2 : \"end\" === u ? V - H : o(v, v + H, H, a, m, v + V, v + V + M, M), B = Math.max(0, B + y), D = Math.max(0, D + v);else {\n        B = \"start\" === f ? T - l - g : \"end\" === f ? T - d + W + S : \"nearest\" === f ? o(l, d, n, g, W + S, T, T + E, E) : T - (l + n / 2) + S / 2, D = \"start\" === u ? V - s - a : \"center\" === u ? V - (s + i / 2) + L / 2 : \"end\" === u ? V - r + m + L : o(s, r, i, a, m + L, V, V + M, M);\n        const {\n          scrollLeft: t,\n          scrollTop: h\n        } = e;\n        B = Math.max(0, Math.min(h + B / Y, e.scrollHeight - n / Y + S)), D = Math.max(0, Math.min(t + D / X, e.scrollWidth - i / X + L)), T += h - B, V += t - D;\n      }\n      k.push({\n        el: e,\n        top: B,\n        left: D\n      });\n    }\n    return k;\n  };\nexport { l as compute };","map":{"version":3,"mappings":"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","names":["isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","getComputedStyle","style","overflowY","overflowX","ownerDocument","defaultView","frameElement","e","frame","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","getParentElement","element","parent","parentElement","getRootNode","host","compute","target","options","document","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","documentElement","frames","cursor","push","body","viewportWidth","visualViewport","width","_b","viewportHeight","height","_d","innerHeight","scrollX","scrollY","window","targetHeight","targetWidth","top","targetTop","right","targetRight","bottom","targetBottom","left","targetLeft","getBoundingClientRect","targetInline","computations","index","length","borderLeft","parseInt","frameStyle","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","offsetWidth","scrollbarHeight","offsetHeight","scaleX","scaleY","targetBlock","Math","max","scrollbarWidth","scrollLeft","scrollTop","min"],"sources":["C:\\Users\\barun\\OneDrive\\Documents\\btp\\chatbot\\client\\node_modules\\compute-scroll-into-view\\src\\index.ts"],"sourcesContent":["// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n/**\n * This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\n * @public\n */\nexport type ScrollMode = 'always' | 'if-needed'\n\n/** @public */\nexport interface Options {\n  /**\n   * Control the logical scroll position on the y-axis. The spec states that the `block` direction is related to the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode), but this is not implemented yet in this library.\n   * This means that `block: 'start'` aligns to the top edge and `block: 'end'` to the bottom.\n   * @defaultValue 'center'\n   */\n  block?: ScrollLogicalPosition\n  /**\n   * Like `block` this is affected by the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode). In left-to-right pages `inline: 'start'` will align to the left edge. In right-to-left it should be flipped. This will be supported in a future release.\n   * @defaultValue 'nearest'\n   */\n  inline?: ScrollLogicalPosition\n  /**\n   * This is a proposed addition to the spec that you can track here: https://github.com/w3c/csswg-drafts/pull/5677\n   *\n   * This library will be updated to reflect any changes to the spec and will provide a migration path.\n   * To be backwards compatible with `Element.scrollIntoViewIfNeeded` if something is not 100% visible it will count as \"needs scrolling\". If you need a different visibility ratio your best option would be to implement an [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n   * @defaultValue 'always'\n   */\n  scrollMode?: ScrollMode\n  /**\n   * By default there is no boundary. All the parent elements of your target is checked until it reaches the viewport ([`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement)) when calculating layout and what to scroll.\n   * By passing a boundary you can short-circuit this loop depending on your needs:\n   * \n   * - Prevent the browser window from scrolling.\n   * - Scroll elements into view in a list, without scrolling container elements.\n   * \n   * You can also pass a function to do more dynamic checks to override the scroll scoping:\n   * \n   * ```js\n   * let actions = compute(target, {\n   *   boundary: (parent) => {\n   *     // By default `overflow: hidden` elements are allowed, only `overflow: visible | clip` is skipped as\n   *     // this is required by the CSSOM spec\n   *     if (getComputedStyle(parent)['overflow'] === 'hidden') {\n   *       return false\n   *     }\n\n   *     return true\n   *   },\n   * })\n   * ```\n   * @defaultValue null\n   */\n  boundary?: Element | ((parent: Element) => boolean) | null\n  /**\n   * New option that skips auto-scrolling all nodes with overflow: hidden set\n   * See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\n   * @defaultValue false\n   * @public\n   */\n  skipOverflowHiddenElements?: boolean\n}\n\n/** @public */\nexport interface ScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nconst isElement = (el: any): el is Element =>\n  typeof el === 'object' && el != null && el.nodeType === 1\n\nconst canOverflow = (\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) => {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nconst getFrameElement = (el: Element) => {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nconst isHiddenByFrame = (el: Element): boolean => {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nconst isScrollable = (el: Element, skipOverflowHiddenElements?: boolean) => {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nconst alignNearest = (\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) => {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nconst getParentElement = (element: Node): Element | null => {\n  const parent = element.parentElement\n  if (parent == null) {\n    return (element.getRootNode() as ShadowRoot).host || null\n  }\n  return parent\n}\n\n/** @public */\nexport const compute = (target: Element, options: Options): ScrollAction[] => {\n  if (typeof document === 'undefined') {\n    // If there's no DOM we assume it's not in a browser environment\n    return []\n  }\n\n  const { scrollMode, block, inline, boundary, skipOverflowHiddenElements } =\n    options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = getParentElement(cursor)\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = window.visualViewport?.width ?? innerWidth\n  const viewportHeight = window.visualViewport?.height ?? innerHeight\n  const { scrollX, scrollY } = window\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop\n      : block === 'end'\n      ? targetBottom\n      : targetTop + targetHeight / 2 // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2\n      : inline === 'end'\n      ? targetRight\n      : targetLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: ScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const { height, width, top, right, bottom, left } =\n      frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    const scaleX =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth === 0\n          ? 0\n          : width / (frame as HTMLElement).offsetWidth\n        : 0\n    const scaleY =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight === 0\n          ? 0\n          : height / (frame as HTMLElement).offsetHeight\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          scrollY,\n          scrollY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          scrollY + targetBlock,\n          scrollY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          scrollX,\n          scrollX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          scrollX + targetInline,\n          scrollX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + scrollY)\n      inlineScroll = Math.max(0, inlineScroll + scrollX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll = Math.max(\n        0,\n        Math.min(\n          scrollTop + blockScroll / scaleY,\n          frame.scrollHeight - height / scaleY + scrollbarHeight\n        )\n      )\n      inlineScroll = Math.max(\n        0,\n        Math.min(\n          scrollLeft + inlineScroll / scaleX,\n          frame.scrollWidth - width / scaleX + scrollbarWidth\n        )\n      )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}