{"ast":null,"code":"import React, { useState } from \"react\";\n\n// const Dropdown = ({ options }) => {\n//   const [selectedOption, setSelectedOption] = useState(\"\");\n\n//   const handleOptionSelect = (option) => {\n//     setSelectedOption(option);\n//     window.location.href = option.url; // redirect to the selected option's URL\n//   };\n\n//   return (\n//     <div>\n//       <select value={selectedOption} onChange={(e) => handleOptionSelect(options.find(option => option.label === e.target.value))}>\n//         <option value=\"\">Select an option</option>\n//         {options.map((option) => (\n//           <option key={option.label} value={option.label}>\n//             {option.label}\n//           </option>\n//         ))}\n//       </select>\n//     </div>\n//   );\n// };\n\n// import ReactFlowRenderer from \"./graphs/ReactFlowRenderer\";\n// import {nodes, edges} from \"./graphs/fever_elements\";\n\n// const nodes = []\n// const edges = []\n\n// const Dropdown = ({ options }) => {\n//   const [selectedOption, setSelectedOption] = useState(\"\");\n//   const [data, setData] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const handleOptionSelect = async (option) => {\n//     setSelectedOption(option.label);\n//     setIsLoading(true);\n\n//     try {\n//       const response = await fetch(`http://localhost:5001/graphapi`, {\n//         method:'POST',\n//         headers : {\n//           'Accept' :'application/json',\n//           'Content-Type' : 'application/json'\n//         },\n//         body : JSON.stringify({\n//           \"label\": option.label\n//         })\n//       });\n//       const data = await response.json();\n\n//       const nodes = data.nodes.map(node => ({\n//         id: node.id,\n//         data: { label: node.label },\n//         position: { x: node.x, y: node.y }\n//       }));\n\n//       const edges = data.edges.map(edge => ({\n//         id: edge.id,\n//         source: edge.source,\n//         target: edge.target\n//       }));\n\n//       setData(data.nodes);\n\n//     } catch (error) {\n//       console.error(error);\n//     }\n\n//     setIsLoading(false);\n//   };\n\n//   return (\n//     <div>\n//       <select\n//         value={selectedOption}\n//         onChange={(e) =>\n//           handleOptionSelect(\n//             options.find((option) => option.label === e.target.value)\n//           )\n//         }\n//       >\n//         <option value=\"\">Select an option</option>\n//         {options.map((option) => (\n//           <option key={option.label} value={option.label}>\n//             {option.label}\n//           </option>\n//         ))}\n//       </select>\n//       {isLoading && <div>Loading...</div>}\n//       {data && <div>{JSON.stringify(nodes)}</div>}\n\n//       <ReactFlowRenderer initialNodes={data.nodes} initialEdges={data.edges}/> \n\n//     </div>\n//   );\n// };\n\nexport default Dropdown;","map":{"version":3,"names":["React","useState","Dropdown"],"sources":["C:/Users/barun/OneDrive/Documents/btp/chatbot/client/src/graph.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// const Dropdown = ({ options }) => {\r\n//   const [selectedOption, setSelectedOption] = useState(\"\");\r\n\r\n//   const handleOptionSelect = (option) => {\r\n//     setSelectedOption(option);\r\n//     window.location.href = option.url; // redirect to the selected option's URL\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <select value={selectedOption} onChange={(e) => handleOptionSelect(options.find(option => option.label === e.target.value))}>\r\n//         <option value=\"\">Select an option</option>\r\n//         {options.map((option) => (\r\n//           <option key={option.label} value={option.label}>\r\n//             {option.label}\r\n//           </option>\r\n//         ))}\r\n//       </select>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// import ReactFlowRenderer from \"./graphs/ReactFlowRenderer\";\r\n// import {nodes, edges} from \"./graphs/fever_elements\";\r\n\r\n// const nodes = []\r\n// const edges = []\r\n\r\n// const Dropdown = ({ options }) => {\r\n//   const [selectedOption, setSelectedOption] = useState(\"\");\r\n//   const [data, setData] = useState(null);\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n\r\n//   const handleOptionSelect = async (option) => {\r\n//     setSelectedOption(option.label);\r\n//     setIsLoading(true);\r\n\r\n//     try {\r\n//       const response = await fetch(`http://localhost:5001/graphapi`, {\r\n//         method:'POST',\r\n//         headers : {\r\n//           'Accept' :'application/json',\r\n//           'Content-Type' : 'application/json'\r\n//         },\r\n//         body : JSON.stringify({\r\n//           \"label\": option.label\r\n//         })\r\n//       });\r\n//       const data = await response.json();\r\n      \r\n//       const nodes = data.nodes.map(node => ({\r\n//         id: node.id,\r\n//         data: { label: node.label },\r\n//         position: { x: node.x, y: node.y }\r\n//       }));\r\n\r\n//       const edges = data.edges.map(edge => ({\r\n//         id: edge.id,\r\n//         source: edge.source,\r\n//         target: edge.target\r\n//       }));\r\n\r\n//       setData(data.nodes);\r\n      \r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n\r\n//     setIsLoading(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <select\r\n//         value={selectedOption}\r\n//         onChange={(e) =>\r\n//           handleOptionSelect(\r\n//             options.find((option) => option.label === e.target.value)\r\n//           )\r\n//         }\r\n//       >\r\n//         <option value=\"\">Select an option</option>\r\n//         {options.map((option) => (\r\n//           <option key={option.label} value={option.label}>\r\n//             {option.label}\r\n//           </option>\r\n//         ))}\r\n//       </select>\r\n//       {isLoading && <div>Loading...</div>}\r\n//       {data && <div>{JSON.stringify(nodes)}</div>}\r\n    \r\n//       <ReactFlowRenderer initialNodes={data.nodes} initialEdges={data.edges}/> \r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nexport default Dropdown;\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,eAAeC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}