{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barun\\\\OneDrive\\\\Documents\\\\btp\\\\chatbot\\\\client\\\\src\\\\flowtree.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n// // import './flowtree.css';\n// // const API_URL = \"http://localhost:5001/fetchalldata\";\n\n// // import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// // import { faFolder, faFolderOpen } from \"@fortawesome/free-solid-svg-icons\";\n// // // import \"./TreeNode.css\";\n\n// // function TreeNode({ data }) {\n// //   const [isOpen, setIsOpen] = useState(false);\n\n// //   const toggle = () => {\n// //     setIsOpen(!isOpen);\n// //   };\n\n// //   const hasChildren = data.children && data.children.length > 0;\n\n// //   return (\n// //     <li className=\"tree-node\">\n// //       <div className=\"tree-node__content\">\n// //         {hasChildren && (\n// //           <FontAwesomeIcon\n// //             icon={isOpen ? faFolderOpen : faFolder}\n// //             className=\"tree-node__toggle\"\n// //             onClick={toggle}\n// //           />\n// //         )}\n// //         <span className=\"tree-node__label\">{data.name}</span>\n// //         {data.value && (\n// //           <span className=\"tree-node__value\">({data.value})</span>\n// //         )}\n// //       </div>\n// //       {hasChildren && isOpen && (\n// //         <ul className=\"tree-node__children\">\n// //           {data.children.map((child) => (\n// //             <TreeNode key={child.name} data={child} />\n// //           ))}\n// //         </ul>\n// //       )}\n// //     </li>\n// //   );\n// // }\n\n// // export default TreeNode;\n\n// import React, { useEffect, useState } from \"react\";\n// import axios from 'axios';\n// import \"./flowtree.css\";\n\n// // function TreeNode({ data }) {\n// //   const [collapsed, setCollapsed] = useState(false);\n\n// //   const handleClick = () => {\n// //     setCollapsed(!collapsed);\n// //   };\n\n// //   const handleMinimizeClick = (e) => {\n// //     e.stopPropagation();\n// //     setCollapsed(true);\n// //   };\n\n// //   const renderChild = (child) => {\n// //     if (typeof child === \"object\") {\n// //       return <TreeNode key={child.name} data={child} />;\n// //     } else {\n// //       return <span className=\"tree-node__value\">\"{child}\"</span>;\n// //     }\n// //   };\n\n// //   const isObjectEmpty = (obj) => {\n// //     return Object.keys(obj).length === 0;\n// //   };\n\n// //   return (\n// //     <li>\n// //       <div className=\"tree-node__content\" onClick={handleClick}>\n// //         <span className=\"tree-node__toggle\">\n// //           {isObjectEmpty(data) ? \"\" : collapsed ? \"+\" : \"-\"}\n// //         </span>\n// //         <span className=\"tree-node__label\">{data.name}</span>\n// //         {Object.values(data)\n// //           .filter((value) => typeof value !== \"object\")\n// //           .map((value) => renderChild(value))}\n// //         {isObjectEmpty(data) && <span className=\"tree-node__value\">{\"{}\"}</span>}\n// //         {!isObjectEmpty(data) && collapsed && (\n// //           <button\n// //             className=\"tree-node__minimize\"\n// //             onClick={handleMinimizeClick}\n// //           >\n// //             Minimize\n// //           </button>\n// //         )}\n// //       </div>\n// //       {!isObjectEmpty(data) && (\n// //         <ul\n// //           className={`tree-node__children ${\n// //             collapsed ? \"tree-node__children--collapsed\" : \"\"\n// //           }`}\n// //         >\n// //           {Object.values(data)\n// //             .filter((value) => typeof value === \"object\")\n// //             .map((child) => (\n// //               <TreeNode key={child.name} data={child} />\n// //             ))}\n// //         </ul>\n// //       )}\n// //     </li>\n// //   );\n// // }\n\n// // function TreeView({ apiUrl }) {\n// //   const [data, setData] = useState([]);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       const response = await fetch(apiUrl);\n// //       const jsonData = await response.json();\n// //       setData([jsonData]);\n// //       console.log(jsonData);\n// //     };\n\n// //     fetchData();\n// //   }, [apiUrl]);\n\n// //   return (\n// //     <ul className=\"tree-view\">\n// //       {data.map((item) => (\n// //         <TreeNode key={item.name} data={item} />\n// //       ))}\n// //     </ul>\n// //   );\n// // }\n\n// // export default TreeView;\n\n// function TreeNode({ data }) {\n//   const [collapsed, setCollapsed] = useState(true);\n\n//   if (typeof data === 'string') {\n//     return (\n//       <div className=\"leaf\">\n//         <span className=\"key\">\"{data}\"</span>\n//       </div>\n//     );\n//   }\n\n//   const keys = Object.keys(data);\n\n//   return (\n//     <div className=\"node\">\n//       <div className=\"toggle\" onClick={() => setCollapsed(!collapsed)}>\n//         {collapsed ? '+' : '-'}\n//       </div>\n//       <span className=\"key\">{'{'}</span>\n//       {!collapsed && (\n//         <div className=\"branch\">\n//           {keys.map((key) => (\n//             <div key={key} className=\"branch-item\">\n//               <TreeNode data={key} />\n//               <span className=\"separator\">: </span>\n//               <TreeNode data={data[key]} />\n//               <span className=\"separator\">{','}</span>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//       <span className=\"key\">{'}'}</span>\n//     </div>\n//   );\n// }\n\n// function TreeView() {\n//   const [jsonData, setJsonData] = useState({});\n\n//   useEffect(() => {\n//     axios.get('http://localhost:5001/fetchalldata')\n//       .then(response => setJsonData(response.data))\n//       .catch(error => console.log(error));\n//   }, []);\n\n//   return (\n//     <div className=\"container\">\n//       <TreeNode data={jsonData} />\n//     </div>\n//   );\n// }\n\n// export default TreeView;\n\n///// working tree\n\n// import React, { useState, useEffect } from 'react';\n// import ReactJson from 'react-json-view';\n// import axios from 'axios';\n\n// const JsonViewer = () => {\n//   const [jsonData, setJsonData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       const result = await axios.get('http://localhost:5001/fetchalldata');\n//       setJsonData(result.data);\n//       setLoading(false);\n//     }\n//     fetchData();\n//   }, []);\n\n//   return (\n//     <div>\n//       {loading ? (\n//         <p>Loading JSON data...</p>\n//       ) : (\n//         <ReactJson src={jsonData} theme=\"monokai\" displayDataTypes={false}\n//         displayObjectSize={false} \n//         name={false}/>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default JsonViewer;\n\n///// working tree\n\nimport React, { useState } from \"react\";\nimport './flowtree.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Question = _ref => {\n  _s();\n  let {\n    question,\n    condition,\n    handleYesClick,\n    handleNoClick,\n    isConditionHidden\n  } = _ref;\n  const [isAnswered, setIsAnswered] = useState(false);\n  const handleAnswer = answer => {\n    setIsAnswered(true);\n    answer === \"yes\" ? handleYesClick(condition) : handleNoClick();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-text\",\n      children: question.ques\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), !isAnswered && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"answer-button\",\n        onClick: () => handleAnswer(\"yes\"),\n        children: \"Yes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"answer-button\",\n        onClick: () => handleAnswer(\"no\"),\n        children: \"No\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }, this), condition && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `condition-container ${isConditionHidden ? \"hidden\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"condition-text\",\n        children: [\"If yes, \", condition.yes.map((ques, i) => /*#__PURE__*/_jsxDEV(Question, {\n          question: {\n            ques\n          },\n          handleYesClick: () => {},\n          handleNoClick: () => {},\n          isConditionHidden: true\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 83\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"condition-text\",\n        children: [\"If no, \", condition.no.map((ques, i) => /*#__PURE__*/_jsxDEV(Question, {\n          question: {\n            ques\n          },\n          handleYesClick: () => {},\n          handleNoClick: () => {},\n          isConditionHidden: true\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 81\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n};\n_s(Question, \"6+BML3xYcHeJtnp0zHCk1U5spuY=\");\n_c = Question;\nconst FlowChart = _ref2 => {\n  _s2();\n  let {\n    data\n  } = _ref2;\n  const [isDataHidden, setIsDataHidden] = useState(false);\n  const handleYesClick = condition => {\n    if (condition && !isDataHidden) {\n      setIsDataHidden(true);\n    }\n  };\n  const handleNoClick = () => {\n    if (!isDataHidden) {\n      setIsDataHidden(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flowchart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `flowchart-node ${isDataHidden ? \"hidden\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flowchart-node-text\",\n        children: data[0].symptom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flowchart-node-text\",\n        children: data[0].questions[0].ques\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arrow-down\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), data[0].questions.slice(1).map((question, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flowchart-node ${isDataHidden ? \"hidden\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flowchart-node-text\",\n          children: question.ques\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), !question.condition && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"arrow-down\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 37\n        }, this), question.condition && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"arrow-down-condition\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"arrow-down-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"arrow-down-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Question, {\n        question: question,\n        condition: question.condition,\n        handleYesClick: handleYesClick,\n        handleNoClick: handleNoClick,\n        isConditionHidden: isDataHidden\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n};\n_s2(FlowChart, \"dwhGbL0Z8kmzzuOcL61vGDNeZwU=\");\n_c2 = FlowChart;\nvar _c, _c2;\n$RefreshReg$(_c, \"Question\");\n$RefreshReg$(_c2, \"FlowChart\");","map":{"version":3,"names":["React","useState","Question","question","condition","handleYesClick","handleNoClick","isConditionHidden","isAnswered","setIsAnswered","handleAnswer","answer","ques","yes","map","i","no","FlowChart","data","isDataHidden","setIsDataHidden","symptom","questions","slice"],"sources":["C:/Users/barun/OneDrive/Documents/btp/chatbot/client/src/flowtree.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import './flowtree.css';\r\n// // const API_URL = \"http://localhost:5001/fetchalldata\";\r\n\r\n// // import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// // import { faFolder, faFolderOpen } from \"@fortawesome/free-solid-svg-icons\";\r\n// // // import \"./TreeNode.css\";\r\n\r\n// // function TreeNode({ data }) {\r\n// //   const [isOpen, setIsOpen] = useState(false);\r\n\r\n// //   const toggle = () => {\r\n// //     setIsOpen(!isOpen);\r\n// //   };\r\n\r\n// //   const hasChildren = data.children && data.children.length > 0;\r\n\r\n// //   return (\r\n// //     <li className=\"tree-node\">\r\n// //       <div className=\"tree-node__content\">\r\n// //         {hasChildren && (\r\n// //           <FontAwesomeIcon\r\n// //             icon={isOpen ? faFolderOpen : faFolder}\r\n// //             className=\"tree-node__toggle\"\r\n// //             onClick={toggle}\r\n// //           />\r\n// //         )}\r\n// //         <span className=\"tree-node__label\">{data.name}</span>\r\n// //         {data.value && (\r\n// //           <span className=\"tree-node__value\">({data.value})</span>\r\n// //         )}\r\n// //       </div>\r\n// //       {hasChildren && isOpen && (\r\n// //         <ul className=\"tree-node__children\">\r\n// //           {data.children.map((child) => (\r\n// //             <TreeNode key={child.name} data={child} />\r\n// //           ))}\r\n// //         </ul>\r\n// //       )}\r\n// //     </li>\r\n// //   );\r\n// // }\r\n\r\n// // export default TreeNode;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import axios from 'axios';\r\n// import \"./flowtree.css\";\r\n\r\n// // function TreeNode({ data }) {\r\n// //   const [collapsed, setCollapsed] = useState(false);\r\n\r\n// //   const handleClick = () => {\r\n// //     setCollapsed(!collapsed);\r\n// //   };\r\n\r\n// //   const handleMinimizeClick = (e) => {\r\n// //     e.stopPropagation();\r\n// //     setCollapsed(true);\r\n// //   };\r\n\r\n// //   const renderChild = (child) => {\r\n// //     if (typeof child === \"object\") {\r\n// //       return <TreeNode key={child.name} data={child} />;\r\n// //     } else {\r\n// //       return <span className=\"tree-node__value\">\"{child}\"</span>;\r\n// //     }\r\n// //   };\r\n\r\n// //   const isObjectEmpty = (obj) => {\r\n// //     return Object.keys(obj).length === 0;\r\n// //   };\r\n\r\n// //   return (\r\n// //     <li>\r\n// //       <div className=\"tree-node__content\" onClick={handleClick}>\r\n// //         <span className=\"tree-node__toggle\">\r\n// //           {isObjectEmpty(data) ? \"\" : collapsed ? \"+\" : \"-\"}\r\n// //         </span>\r\n// //         <span className=\"tree-node__label\">{data.name}</span>\r\n// //         {Object.values(data)\r\n// //           .filter((value) => typeof value !== \"object\")\r\n// //           .map((value) => renderChild(value))}\r\n// //         {isObjectEmpty(data) && <span className=\"tree-node__value\">{\"{}\"}</span>}\r\n// //         {!isObjectEmpty(data) && collapsed && (\r\n// //           <button\r\n// //             className=\"tree-node__minimize\"\r\n// //             onClick={handleMinimizeClick}\r\n// //           >\r\n// //             Minimize\r\n// //           </button>\r\n// //         )}\r\n// //       </div>\r\n// //       {!isObjectEmpty(data) && (\r\n// //         <ul\r\n// //           className={`tree-node__children ${\r\n// //             collapsed ? \"tree-node__children--collapsed\" : \"\"\r\n// //           }`}\r\n// //         >\r\n// //           {Object.values(data)\r\n// //             .filter((value) => typeof value === \"object\")\r\n// //             .map((child) => (\r\n// //               <TreeNode key={child.name} data={child} />\r\n// //             ))}\r\n// //         </ul>\r\n// //       )}\r\n// //     </li>\r\n// //   );\r\n// // }\r\n\r\n// // function TreeView({ apiUrl }) {\r\n// //   const [data, setData] = useState([]);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchData = async () => {\r\n// //       const response = await fetch(apiUrl);\r\n// //       const jsonData = await response.json();\r\n// //       setData([jsonData]);\r\n// //       console.log(jsonData);\r\n// //     };\r\n\r\n// //     fetchData();\r\n// //   }, [apiUrl]);\r\n\r\n// //   return (\r\n// //     <ul className=\"tree-view\">\r\n// //       {data.map((item) => (\r\n// //         <TreeNode key={item.name} data={item} />\r\n// //       ))}\r\n// //     </ul>\r\n// //   );\r\n// // }\r\n\r\n// // export default TreeView;\r\n\r\n// function TreeNode({ data }) {\r\n//   const [collapsed, setCollapsed] = useState(true);\r\n\r\n//   if (typeof data === 'string') {\r\n//     return (\r\n//       <div className=\"leaf\">\r\n//         <span className=\"key\">\"{data}\"</span>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const keys = Object.keys(data);\r\n\r\n//   return (\r\n//     <div className=\"node\">\r\n//       <div className=\"toggle\" onClick={() => setCollapsed(!collapsed)}>\r\n//         {collapsed ? '+' : '-'}\r\n//       </div>\r\n//       <span className=\"key\">{'{'}</span>\r\n//       {!collapsed && (\r\n//         <div className=\"branch\">\r\n//           {keys.map((key) => (\r\n//             <div key={key} className=\"branch-item\">\r\n//               <TreeNode data={key} />\r\n//               <span className=\"separator\">: </span>\r\n//               <TreeNode data={data[key]} />\r\n//               <span className=\"separator\">{','}</span>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n//       <span className=\"key\">{'}'}</span>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function TreeView() {\r\n//   const [jsonData, setJsonData] = useState({});\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:5001/fetchalldata')\r\n//       .then(response => setJsonData(response.data))\r\n//       .catch(error => console.log(error));\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <TreeNode data={jsonData} />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TreeView;\r\n\r\n///// working tree\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import ReactJson from 'react-json-view';\r\n// import axios from 'axios';\r\n\r\n// const JsonViewer = () => {\r\n//   const [jsonData, setJsonData] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     async function fetchData() {\r\n//       const result = await axios.get('http://localhost:5001/fetchalldata');\r\n//       setJsonData(result.data);\r\n//       setLoading(false);\r\n//     }\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       {loading ? (\r\n//         <p>Loading JSON data...</p>\r\n//       ) : (\r\n//         <ReactJson src={jsonData} theme=\"monokai\" displayDataTypes={false}\r\n//         displayObjectSize={false} \r\n//         name={false}/>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default JsonViewer;\r\n\r\n///// working tree\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport './flowtree.css';\r\nconst Question = ({ question, condition, handleYesClick, handleNoClick, isConditionHidden }) => {\r\n  const [isAnswered, setIsAnswered] = useState(false);\r\n\r\n  const handleAnswer = (answer) => {\r\n    setIsAnswered(true);\r\n    answer === \"yes\" ? handleYesClick(condition) : handleNoClick();\r\n  };\r\n\r\n  return (\r\n    <div className=\"question-container\">\r\n      <div className=\"question-text\">{question.ques}</div>\r\n      {!isAnswered && (\r\n        <div className=\"answer-container\">\r\n          <button className=\"answer-button\" onClick={() => handleAnswer(\"yes\")}>\r\n            Yes\r\n          </button>\r\n          <button className=\"answer-button\" onClick={() => handleAnswer(\"no\")}>\r\n            No\r\n          </button>\r\n        </div>\r\n      )}\r\n      {condition && (\r\n        <div className={`condition-container ${isConditionHidden ? \"hidden\" : \"\"}`}>\r\n          <div className=\"condition-text\">If yes, {condition.yes.map((ques, i) => <Question key={i} question={{ques}} handleYesClick={() => {}} handleNoClick={() => {}} isConditionHidden={true} />)}</div>\r\n          <div className=\"condition-text\">If no, {condition.no.map((ques, i) => <Question key={i} question={{ques}} handleYesClick={() => {}} handleNoClick={() => {}} isConditionHidden={true} />)}</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FlowChart = ({ data }) => {\r\n  const [isDataHidden, setIsDataHidden] = useState(false);\r\n\r\n  const handleYesClick = (condition) => {\r\n    if (condition && !isDataHidden) {\r\n      setIsDataHidden(true);\r\n    }\r\n  };\r\n\r\n  const handleNoClick = () => {\r\n    if (!isDataHidden) {\r\n      setIsDataHidden(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flowchart-container\">\r\n      <div className={`flowchart-node ${isDataHidden ? \"hidden\" : \"\"}`}>\r\n        <div className=\"flowchart-node-text\">{data[0].symptom}</div>\r\n        <div className=\"flowchart-node-text\">{data[0].questions[0].ques}</div>\r\n        <div className=\"arrow-down\"></div>\r\n      </div>\r\n      {data[0].questions.slice(1).map((question, i) => (\r\n        <div key={i}>\r\n          <div className={`flowchart-node ${isDataHidden ? \"hidden\" : \"\"}`}>\r\n            <div className=\"flowchart-node-text\">{question.ques}</div>\r\n            {!question.condition && <div className=\"arrow-down\"></div>}\r\n            {question.condition && (\r\n              <div className=\"arrow-down-condition\">\r\n                <div className=\"arrow-down-left\"></div>\r\n                <div className=\"arrow-down-right\"></div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <Question\r\n            question={question}\r\n            condition={question.condition}\r\n            handleYesClick={handleYesClick}\r\n            handleNoClick={handleNoClick}\r\n            isConditionHidden={isDataHidden}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,gBAAgB;AAAC;AACxB,MAAMC,QAAQ,GAAG,QAA+E;EAAA;EAAA,IAA9E;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,cAAc;IAAEC,aAAa;IAAEC;EAAkB,CAAC;EACzF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR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"},"metadata":{},"sourceType":"module","externalDependencies":[]}