{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barun\\\\OneDrive\\\\Documents\\\\btp\\\\chatbot\\\\client\\\\src\\\\flowtree.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n// // import './flowtree.css';\n// // const API_URL = \"http://localhost:5001/fetchalldata\";\n\n// // import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// // import { faFolder, faFolderOpen } from \"@fortawesome/free-solid-svg-icons\";\n// // // import \"./TreeNode.css\";\n\n// // function TreeNode({ data }) {\n// //   const [isOpen, setIsOpen] = useState(false);\n\n// //   const toggle = () => {\n// //     setIsOpen(!isOpen);\n// //   };\n\n// //   const hasChildren = data.children && data.children.length > 0;\n\n// //   return (\n// //     <li className=\"tree-node\">\n// //       <div className=\"tree-node__content\">\n// //         {hasChildren && (\n// //           <FontAwesomeIcon\n// //             icon={isOpen ? faFolderOpen : faFolder}\n// //             className=\"tree-node__toggle\"\n// //             onClick={toggle}\n// //           />\n// //         )}\n// //         <span className=\"tree-node__label\">{data.name}</span>\n// //         {data.value && (\n// //           <span className=\"tree-node__value\">({data.value})</span>\n// //         )}\n// //       </div>\n// //       {hasChildren && isOpen && (\n// //         <ul className=\"tree-node__children\">\n// //           {data.children.map((child) => (\n// //             <TreeNode key={child.name} data={child} />\n// //           ))}\n// //         </ul>\n// //       )}\n// //     </li>\n// //   );\n// // }\n\n// // export default TreeNode;\n\n// import React, { useEffect, useState } from \"react\";\n// import axios from 'axios';\n// import \"./flowtree.css\";\n\n// // function TreeNode({ data }) {\n// //   const [collapsed, setCollapsed] = useState(false);\n\n// //   const handleClick = () => {\n// //     setCollapsed(!collapsed);\n// //   };\n\n// //   const handleMinimizeClick = (e) => {\n// //     e.stopPropagation();\n// //     setCollapsed(true);\n// //   };\n\n// //   const renderChild = (child) => {\n// //     if (typeof child === \"object\") {\n// //       return <TreeNode key={child.name} data={child} />;\n// //     } else {\n// //       return <span className=\"tree-node__value\">\"{child}\"</span>;\n// //     }\n// //   };\n\n// //   const isObjectEmpty = (obj) => {\n// //     return Object.keys(obj).length === 0;\n// //   };\n\n// //   return (\n// //     <li>\n// //       <div className=\"tree-node__content\" onClick={handleClick}>\n// //         <span className=\"tree-node__toggle\">\n// //           {isObjectEmpty(data) ? \"\" : collapsed ? \"+\" : \"-\"}\n// //         </span>\n// //         <span className=\"tree-node__label\">{data.name}</span>\n// //         {Object.values(data)\n// //           .filter((value) => typeof value !== \"object\")\n// //           .map((value) => renderChild(value))}\n// //         {isObjectEmpty(data) && <span className=\"tree-node__value\">{\"{}\"}</span>}\n// //         {!isObjectEmpty(data) && collapsed && (\n// //           <button\n// //             className=\"tree-node__minimize\"\n// //             onClick={handleMinimizeClick}\n// //           >\n// //             Minimize\n// //           </button>\n// //         )}\n// //       </div>\n// //       {!isObjectEmpty(data) && (\n// //         <ul\n// //           className={`tree-node__children ${\n// //             collapsed ? \"tree-node__children--collapsed\" : \"\"\n// //           }`}\n// //         >\n// //           {Object.values(data)\n// //             .filter((value) => typeof value === \"object\")\n// //             .map((child) => (\n// //               <TreeNode key={child.name} data={child} />\n// //             ))}\n// //         </ul>\n// //       )}\n// //     </li>\n// //   );\n// // }\n\n// // function TreeView({ apiUrl }) {\n// //   const [data, setData] = useState([]);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       const response = await fetch(apiUrl);\n// //       const jsonData = await response.json();\n// //       setData([jsonData]);\n// //       console.log(jsonData);\n// //     };\n\n// //     fetchData();\n// //   }, [apiUrl]);\n\n// //   return (\n// //     <ul className=\"tree-view\">\n// //       {data.map((item) => (\n// //         <TreeNode key={item.name} data={item} />\n// //       ))}\n// //     </ul>\n// //   );\n// // }\n\n// // export default TreeView;\n\n// function TreeNode({ data }) {\n//   const [collapsed, setCollapsed] = useState(true);\n\n//   if (typeof data === 'string') {\n//     return (\n//       <div className=\"leaf\">\n//         <span className=\"key\">\"{data}\"</span>\n//       </div>\n//     );\n//   }\n\n//   const keys = Object.keys(data);\n\n//   return (\n//     <div className=\"node\">\n//       <div className=\"toggle\" onClick={() => setCollapsed(!collapsed)}>\n//         {collapsed ? '+' : '-'}\n//       </div>\n//       <span className=\"key\">{'{'}</span>\n//       {!collapsed && (\n//         <div className=\"branch\">\n//           {keys.map((key) => (\n//             <div key={key} className=\"branch-item\">\n//               <TreeNode data={key} />\n//               <span className=\"separator\">: </span>\n//               <TreeNode data={data[key]} />\n//               <span className=\"separator\">{','}</span>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//       <span className=\"key\">{'}'}</span>\n//     </div>\n//   );\n// }\n\n// function TreeView() {\n//   const [jsonData, setJsonData] = useState({});\n\n//   useEffect(() => {\n//     axios.get('http://localhost:5001/fetchalldata')\n//       .then(response => setJsonData(response.data))\n//       .catch(error => console.log(error));\n//   }, []);\n\n//   return (\n//     <div className=\"container\">\n//       <TreeNode data={jsonData} />\n//     </div>\n//   );\n// }\n\n// export default TreeView;\n\n///// working tree\n\n// import React, { useState, useEffect } from 'react';\n// import ReactJson from 'react-json-view';\n// import axios from 'axios';\n\n// const JsonViewer = () => {\n//   const [jsonData, setJsonData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       const result = await axios.get('http://localhost:5001/fetchalldata');\n//       setJsonData(result.data);\n//       setLoading(false);\n//     }\n//     fetchData();\n//   }, []);\n\n//   return (\n//     <div>\n//       {loading ? (\n//         <p>Loading JSON data...</p>\n//       ) : (\n//         <ReactJson src={jsonData} theme=\"monokai\" displayDataTypes={false}\n//         displayObjectSize={false} \n//         name={false}/>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default JsonViewer;\n\n///// working tree\n\nimport React, { useState } from \"react\";\nimport './flowtree.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App(_ref) {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [expanded, setExpanded] = useState([]);\n  const toggleExpanded = index => {\n    if (expanded.includes(index)) {\n      setExpanded(expanded.filter(i => i !== index));\n    } else {\n      setExpanded([...expanded, index]);\n    }\n  };\n  const renderQuestion = (question, index) => {\n    const {\n      ques,\n      condition\n    } = question;\n    const isExpanded = expanded.includes(index);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: ques\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), condition && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleExpanded(index),\n          children: [isExpanded ? \"Hide\" : \"Show\", \" Condition\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-condition\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"box-condition-option\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 19\n            }, this), condition.yes.map((q, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"box\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"box-header\",\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: q\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 23\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"box-condition-option\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 19\n            }, this), condition.no.map((q, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"box\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"box-header\",\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: q\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 23\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSymptom = (symptom, index) => {\n    const {\n      symptom: title,\n      questions\n    } = symptom;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), questions.map((q, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-container\",\n        children: [renderQuestion(q, i), questions[i + 1] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"arrow-down\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 34\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Symptoms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), data.map((symptom, i) => renderSymptom(symptom, i))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"GYNk/hqDgKyNfGTo/iYfYRt/jTQ=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","data","expanded","setExpanded","toggleExpanded","index","includes","filter","i","renderQuestion","question","ques","condition","isExpanded","yes","map","q","no","renderSymptom","symptom","title","questions"],"sources":["C:/Users/barun/OneDrive/Documents/btp/chatbot/client/src/flowtree.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import './flowtree.css';\r\n// // const API_URL = \"http://localhost:5001/fetchalldata\";\r\n\r\n// // import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// // import { faFolder, faFolderOpen } from \"@fortawesome/free-solid-svg-icons\";\r\n// // // import \"./TreeNode.css\";\r\n\r\n// // function TreeNode({ data }) {\r\n// //   const [isOpen, setIsOpen] = useState(false);\r\n\r\n// //   const toggle = () => {\r\n// //     setIsOpen(!isOpen);\r\n// //   };\r\n\r\n// //   const hasChildren = data.children && data.children.length > 0;\r\n\r\n// //   return (\r\n// //     <li className=\"tree-node\">\r\n// //       <div className=\"tree-node__content\">\r\n// //         {hasChildren && (\r\n// //           <FontAwesomeIcon\r\n// //             icon={isOpen ? faFolderOpen : faFolder}\r\n// //             className=\"tree-node__toggle\"\r\n// //             onClick={toggle}\r\n// //           />\r\n// //         )}\r\n// //         <span className=\"tree-node__label\">{data.name}</span>\r\n// //         {data.value && (\r\n// //           <span className=\"tree-node__value\">({data.value})</span>\r\n// //         )}\r\n// //       </div>\r\n// //       {hasChildren && isOpen && (\r\n// //         <ul className=\"tree-node__children\">\r\n// //           {data.children.map((child) => (\r\n// //             <TreeNode key={child.name} data={child} />\r\n// //           ))}\r\n// //         </ul>\r\n// //       )}\r\n// //     </li>\r\n// //   );\r\n// // }\r\n\r\n// // export default TreeNode;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import axios from 'axios';\r\n// import \"./flowtree.css\";\r\n\r\n// // function TreeNode({ data }) {\r\n// //   const [collapsed, setCollapsed] = useState(false);\r\n\r\n// //   const handleClick = () => {\r\n// //     setCollapsed(!collapsed);\r\n// //   };\r\n\r\n// //   const handleMinimizeClick = (e) => {\r\n// //     e.stopPropagation();\r\n// //     setCollapsed(true);\r\n// //   };\r\n\r\n// //   const renderChild = (child) => {\r\n// //     if (typeof child === \"object\") {\r\n// //       return <TreeNode key={child.name} data={child} />;\r\n// //     } else {\r\n// //       return <span className=\"tree-node__value\">\"{child}\"</span>;\r\n// //     }\r\n// //   };\r\n\r\n// //   const isObjectEmpty = (obj) => {\r\n// //     return Object.keys(obj).length === 0;\r\n// //   };\r\n\r\n// //   return (\r\n// //     <li>\r\n// //       <div className=\"tree-node__content\" onClick={handleClick}>\r\n// //         <span className=\"tree-node__toggle\">\r\n// //           {isObjectEmpty(data) ? \"\" : collapsed ? \"+\" : \"-\"}\r\n// //         </span>\r\n// //         <span className=\"tree-node__label\">{data.name}</span>\r\n// //         {Object.values(data)\r\n// //           .filter((value) => typeof value !== \"object\")\r\n// //           .map((value) => renderChild(value))}\r\n// //         {isObjectEmpty(data) && <span className=\"tree-node__value\">{\"{}\"}</span>}\r\n// //         {!isObjectEmpty(data) && collapsed && (\r\n// //           <button\r\n// //             className=\"tree-node__minimize\"\r\n// //             onClick={handleMinimizeClick}\r\n// //           >\r\n// //             Minimize\r\n// //           </button>\r\n// //         )}\r\n// //       </div>\r\n// //       {!isObjectEmpty(data) && (\r\n// //         <ul\r\n// //           className={`tree-node__children ${\r\n// //             collapsed ? \"tree-node__children--collapsed\" : \"\"\r\n// //           }`}\r\n// //         >\r\n// //           {Object.values(data)\r\n// //             .filter((value) => typeof value === \"object\")\r\n// //             .map((child) => (\r\n// //               <TreeNode key={child.name} data={child} />\r\n// //             ))}\r\n// //         </ul>\r\n// //       )}\r\n// //     </li>\r\n// //   );\r\n// // }\r\n\r\n// // function TreeView({ apiUrl }) {\r\n// //   const [data, setData] = useState([]);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchData = async () => {\r\n// //       const response = await fetch(apiUrl);\r\n// //       const jsonData = await response.json();\r\n// //       setData([jsonData]);\r\n// //       console.log(jsonData);\r\n// //     };\r\n\r\n// //     fetchData();\r\n// //   }, [apiUrl]);\r\n\r\n// //   return (\r\n// //     <ul className=\"tree-view\">\r\n// //       {data.map((item) => (\r\n// //         <TreeNode key={item.name} data={item} />\r\n// //       ))}\r\n// //     </ul>\r\n// //   );\r\n// // }\r\n\r\n// // export default TreeView;\r\n\r\n// function TreeNode({ data }) {\r\n//   const [collapsed, setCollapsed] = useState(true);\r\n\r\n//   if (typeof data === 'string') {\r\n//     return (\r\n//       <div className=\"leaf\">\r\n//         <span className=\"key\">\"{data}\"</span>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const keys = Object.keys(data);\r\n\r\n//   return (\r\n//     <div className=\"node\">\r\n//       <div className=\"toggle\" onClick={() => setCollapsed(!collapsed)}>\r\n//         {collapsed ? '+' : '-'}\r\n//       </div>\r\n//       <span className=\"key\">{'{'}</span>\r\n//       {!collapsed && (\r\n//         <div className=\"branch\">\r\n//           {keys.map((key) => (\r\n//             <div key={key} className=\"branch-item\">\r\n//               <TreeNode data={key} />\r\n//               <span className=\"separator\">: </span>\r\n//               <TreeNode data={data[key]} />\r\n//               <span className=\"separator\">{','}</span>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n//       <span className=\"key\">{'}'}</span>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function TreeView() {\r\n//   const [jsonData, setJsonData] = useState({});\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:5001/fetchalldata')\r\n//       .then(response => setJsonData(response.data))\r\n//       .catch(error => console.log(error));\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <TreeNode data={jsonData} />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TreeView;\r\n\r\n///// working tree\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import ReactJson from 'react-json-view';\r\n// import axios from 'axios';\r\n\r\n// const JsonViewer = () => {\r\n//   const [jsonData, setJsonData] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     async function fetchData() {\r\n//       const result = await axios.get('http://localhost:5001/fetchalldata');\r\n//       setJsonData(result.data);\r\n//       setLoading(false);\r\n//     }\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       {loading ? (\r\n//         <p>Loading JSON data...</p>\r\n//       ) : (\r\n//         <ReactJson src={jsonData} theme=\"monokai\" displayDataTypes={false}\r\n//         displayObjectSize={false} \r\n//         name={false}/>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default JsonViewer;\r\n\r\n///// working tree\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport './flowtree.css';\r\nexport default function App({ data }) {\r\n  const [expanded, setExpanded] = useState([]);\r\n\r\n  const toggleExpanded = (index) => {\r\n    if (expanded.includes(index)) {\r\n      setExpanded(expanded.filter((i) => i !== index));\r\n    } else {\r\n      setExpanded([...expanded, index]);\r\n    }\r\n  };\r\n\r\n  const renderQuestion = (question, index) => {\r\n    const { ques, condition } = question;\r\n    const isExpanded = expanded.includes(index);\r\n\r\n    return (\r\n      <div className=\"box\">\r\n        <div className=\"box-header\">\r\n          <h4>{ques}</h4>\r\n        </div>\r\n        {condition && (\r\n          <>\r\n            <button onClick={() => toggleExpanded(index)}>\r\n              {isExpanded ? \"Hide\" : \"Show\"} Condition\r\n            </button>\r\n            {isExpanded && (\r\n              <div className=\"box-condition\">\r\n                <div className=\"box-condition-option\">\r\n                  <h5>Yes</h5>\r\n                  {condition.yes.map((q, i) => (\r\n                    <div key={i} className=\"box\">\r\n                      <div className=\"box-header\">\r\n                        <h4>{q}</h4>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                <div className=\"box-condition-option\">\r\n                  <h5>No</h5>\r\n                  {condition.no.map((q, i) => (\r\n                    <div key={i} className=\"box\">\r\n                      <div className=\"box-header\">\r\n                        <h4>{q}</h4>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderSymptom = (symptom, index) => {\r\n    const { symptom: title, questions } = symptom;\r\n\r\n    return (\r\n      <div key={index}>\r\n        <h3>{title}</h3>\r\n        {questions.map((q, i) => (\r\n          <div key={i} className=\"box-container\">\r\n            {renderQuestion(q, i)}\r\n            {questions[i + 1] && <div className=\"arrow-down\"></div>}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>Symptoms</h2>\r\n      {data.map((symptom, i) => renderSymptom(symptom, i))}\r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,gBAAgB;AAAC;AAAA;AACxB,eAAe,SAASC,GAAG,OAAW;EAAA;EAAA,IAAV;IAAEC;EAAK,CAAC;EAClC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMK,cAAc,GAAIC,KAAK,IAAK;IAChC,IAAIH,QAAQ,CAACI,QAAQ,CAACD,KAAK,CAAC,EAAE;MAC5BF,WAAW,CAACD,QAAQ,CAACK,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKH,KAAK,CAAC,CAAC;IAClD,CAAC,MAAM;MACLF,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEG,KAAK,CAAC,CAAC;IACnC;EACF,CAAC;EAED,MAAMI,cAAc,GAAG,CAACC,QAAQ,EAAEL,KAAK,KAAK;IAC1C,MAAM;MAAEM,IAAI;MAAEC;IAAU,CAAC,GAAGF,QAAQ;IACpC,MAAMG,UAAU,GAAGX,QAAQ,CAACI,QAAQ,CAACD,KAAK,CAAC;IAE3C,oBACE;MAAK,SAAS,EAAC,KAAK;MAAA,wBAClB;QAAK,SAAS,EAAC,YAAY;QAAA,uBACzB;UAAA,UAAKM;QAAI;UAAA;UAAA;UAAA;QAAA;MAAM;QAAA;QAAA;QAAA;MAAA,QACX,EACLC,SAAS,iBACR;QAAA,wBACE;UAAQ,OAAO,EAAE,MAAMR,cAAc,CAACC,KAAK,CAAE;UAAA,WAC1CQ,UAAU,GAAG,MAAM,GAAG,MAAM,EAAC,YAChC;QAAA;UAAA;UAAA;UAAA;QAAA,QAAS,EACRA,UAAU,iBACT;UAAK,SAAS,EAAC,eAAe;UAAA,wBAC5B;YAAK,SAAS,EAAC,sBAAsB;YAAA,wBACnC;cAAA,UAAI;YAAG;cAAA;cAAA;cAAA;YAAA,QAAK,EACXD,SAAS,CAACE,GAAG,CAACC,GAAG,CAAC,CAACC,CAAC,EAAER,CAAC,kBACtB;cAAa,SAAS,EAAC,KAAK;cAAA,uBAC1B;gBAAK,SAAS,EAAC,YAAY;gBAAA,uBACzB;kBAAA,UAAKQ;gBAAC;kBAAA;kBAAA;kBAAA;gBAAA;cAAM;gBAAA;gBAAA;gBAAA;cAAA;YACR,GAHER,CAAC;cAAA;cAAA;cAAA;YAAA,QAKZ,CAAC;UAAA;YAAA;YAAA;YAAA;UAAA,QACE,eACN;YAAK,SAAS,EAAC,sBAAsB;YAAA,wBACnC;cAAA,UAAI;YAAE;cAAA;cAAA;cAAA;YAAA,QAAK,EACVI,SAAS,CAACK,EAAE,CAACF,GAAG,CAAC,CAACC,CAAC,EAAER,CAAC,kBACrB;cAAa,SAAS,EAAC,KAAK;cAAA,uBAC1B;gBAAK,SAAS,EAAC,YAAY;gBAAA,uBACzB;kBAAA,UAAKQ;gBAAC;kBAAA;kBAAA;kBAAA;gBAAA;cAAM;gBAAA;gBAAA;gBAAA;cAAA;YACR,GAHER,CAAC;cAAA;cAAA;cAAA;YAAA,QAKZ,CAAC;UAAA;YAAA;YAAA;YAAA;UAAA,QACE;QAAA;UAAA;UAAA;UAAA;QAAA,QAET;MAAA,gBAEJ;IAAA;MAAA;MAAA;MAAA;IAAA,QACG;EAEV,CAAC;EAED,MAAMU,aAAa,GAAG,CAACC,OAAO,EAAEd,KAAK,KAAK;IACxC,MAAM;MAAEc,OAAO,EAAEC,KAAK;MAAEC;IAAU,CAAC,GAAGF,OAAO;IAE7C,oBACE;MAAA,wBACE;QAAA,UAAKC;MAAK;QAAA;QAAA;QAAA;MAAA,QAAM,EACfC,SAAS,CAACN,GAAG,CAAC,CAACC,CAAC,EAAER,CAAC,kBAClB;QAAa,SAAS,EAAC,eAAe;QAAA,WACnCC,cAAc,CAACO,CAAC,EAAER,CAAC,CAAC,EACpBa,SAAS,CAACb,CAAC,GAAG,CAAC,CAAC,iBAAI;UAAK,SAAS,EAAC;QAAY;UAAA;UAAA;UAAA;QAAA,QAAO;MAAA,GAF/CA,CAAC;QAAA;QAAA;QAAA;MAAA,QAIZ,CAAC;IAAA,GAPMH,KAAK;MAAA;MAAA;MAAA;IAAA,QAQT;EAEV,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAA,UAAI;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAK,EAChBJ,IAAI,CAACc,GAAG,CAAC,CAACI,OAAO,EAAEX,CAAC,KAAKU,aAAa,CAACC,OAAO,EAAEX,CAAC,CAAC,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QAChD;AAEV;AAAC,GA7EuBR,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}