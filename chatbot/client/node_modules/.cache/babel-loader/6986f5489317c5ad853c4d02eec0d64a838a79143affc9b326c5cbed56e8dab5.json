{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barun\\\\OneDrive\\\\Documents\\\\btp\\\\chatbot\\\\client\\\\src\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, ConnectionLineType } from \"react-flow-renderer\";\n// import { nodes as initialNodes, edges as initialEdges } from \"./elements\";\n// import { Button, Modal, Input, Form } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReactFlowRenderer() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const onConnect = useCallback(params => setEdges(eds => addEdge({\n    ...params,\n    type: ConnectionLineType.SmoothStep,\n    animated: true,\n    style: {\n      stroke: \"red\"\n    }\n  }, eds)), [setEdges]);\n  const getNodeId = () => Math.random();\n  function onInit() {\n    console.log(\"Logged\");\n  }\n  function displayCustomNamedNodeModal() {\n    setIsModalVisible(true);\n  }\n  function handleCancel() {\n    setIsModalVisible(false);\n  }\n  function handleOk(data) {\n    onAdd(data.nodeName);\n    setIsModalVisible(false);\n  }\n  const onAdd = useCallback(data => {\n    const newNode = {\n      id: String(getNodeId()),\n      data: {\n        label: data\n      },\n      position: {\n        x: 50,\n        y: 0\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  }, [setNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      margin: \"10px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Basic Modal\",\n      visible: isModalVisible,\n      onCancel: handleCancel,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onFinish: handleOk,\n        autoComplete: \"off\",\n        name: \"new node\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Node Name\",\n          name: \"nodeName\",\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      onClick: () => displayCustomNamedNodeModal(),\n      children: \"Add Custom Name Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onInit: onInit,\n      fitView: true,\n      attributionPosition: \"bottom-left\",\n      connectionLineType: ConnectionLineType.SmoothStep\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(ReactFlowRenderer, \"ZSyAHzEy2UytmdRwOIsAlBxwVv4=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = ReactFlowRenderer;\nexport default ReactFlowRenderer;\nvar _c;\n$RefreshReg$(_c, \"ReactFlowRenderer\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","addEdge","useNodesState","useEdgesState","ConnectionLineType","ReactFlowRenderer","nodes","setNodes","onNodesChange","initialNodes","edges","setEdges","onEdgesChange","initialEdges","isModalVisible","setIsModalVisible","onConnect","params","eds","type","SmoothStep","animated","style","stroke","getNodeId","Math","random","onInit","console","log","displayCustomNamedNodeModal","handleCancel","handleOk","data","onAdd","nodeName","newNode","id","String","label","position","x","y","nds","concat","height","margin"],"sources":["C:/Users/barun/OneDrive/Documents/btp/chatbot/client/src/graph.js"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  ConnectionLineType,\r\n} from \"react-flow-renderer\";\r\n// import { nodes as initialNodes, edges as initialEdges } from \"./elements\";\r\n// import { Button, Modal, Input, Form } from \"antd\";\r\n\r\nfunction ReactFlowRenderer() {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const onConnect = useCallback(\r\n    (params) =>\r\n      setEdges((eds) =>\r\n        addEdge(\r\n          {\r\n            ...params,\r\n            type: ConnectionLineType.SmoothStep,\r\n            animated: true,\r\n            style: { stroke: \"red\" },\r\n          },\r\n          eds\r\n        )\r\n      ),\r\n    [setEdges]\r\n  );\r\n  const getNodeId = () => Math.random();\r\n  function onInit() {\r\n    console.log(\"Logged\");\r\n  }\r\n  function displayCustomNamedNodeModal() {\r\n    setIsModalVisible(true);\r\n  }\r\n  function handleCancel() {\r\n    setIsModalVisible(false);\r\n  }\r\n  function handleOk(data) {\r\n    onAdd(data.nodeName);\r\n    setIsModalVisible(false);\r\n  }\r\n  const onAdd = useCallback(\r\n    (data) => {\r\n      const newNode = {\r\n        id: String(getNodeId()),\r\n        data: { label: data },\r\n        position: {\r\n          x: 50,\r\n          y: 0,\r\n        },\r\n      };\r\n      setNodes((nds) => nds.concat(newNode));\r\n    },\r\n    [setNodes]\r\n  );\r\n  return (\r\n    <div style={{ height: \"100vh\", margin: \"10px\" }}>\r\n      <Modal\r\n        title=\"Basic Modal\"\r\n        visible={isModalVisible}\r\n        onCancel={handleCancel}\r\n      >\r\n        <Form onFinish={handleOk} autoComplete=\"off\" name=\"new node\">\r\n          <Form.Item label=\"Node Name\" name=\"nodeName\">\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n      <Button type=\"primary\" onClick={() => displayCustomNamedNodeModal()}>\r\n        Add Custom Name Node\r\n      </Button>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        onInit={onInit}\r\n        fitView\r\n        attributionPosition=\"bottom-left\"\r\n        connectionLineType={ConnectionLineType.SmoothStep}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReactFlowRenderer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}