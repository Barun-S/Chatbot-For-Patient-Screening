{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barun\\\\OneDrive\\\\Documents\\\\btp\\\\chatbot\\\\client\\\\src\\\\flowtree.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:5001/fetchalldata\";\nconst IfElseTree = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  useEffect(() => {\n    fetch(API_URL).then(response => response.json()).then(jsonData => setData(jsonData));\n  }, []);\n  const handleClick = node => {\n    setSelectedNode(node);\n  };\n  const renderTree = function (nodes) {\n    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return nodes.map(node => {\n      const {\n        id,\n        name,\n        children\n      } = node;\n      const padding = level * 20;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `node ${selectedNode === node ? 'selected' : ''}`,\n        onClick: () => handleClick(node),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"node-content\",\n          style: {\n            paddingLeft: padding\n          },\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, _this), children && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"children\",\n          children: renderTree(children, level + 1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 24\n        }, _this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, _this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"if-else-tree\",\n    children: data ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: renderTree(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code\",\n        children: selectedNode && /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: [\"if (\", selectedNode.condition, \") \", '{\\n', '  ', selectedNode.trueBranch, '\\n', '}', \" \", 'else {', \" \", '\\n', '  ', selectedNode.falseBranch, '\\n', '}']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(IfElseTree, \"aBnOvnUW0++isCA8rP1UtptIK6A=\");\n_c = IfElseTree;\nexport default IfElseTree;\nvar _c;\n$RefreshReg$(_c, \"IfElseTree\");","map":{"version":3,"names":["React","useState","useEffect","API_URL","IfElseTree","data","setData","selectedNode","setSelectedNode","fetch","then","response","json","jsonData","handleClick","node","renderTree","nodes","level","map","id","name","children","padding","paddingLeft","condition","trueBranch","falseBranch"],"sources":["C:/Users/barun/OneDrive/Documents/btp/chatbot/client/src/flowtree.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst API_URL = \"http://localhost:5001/fetchalldata\";\r\n\r\nconst IfElseTree = () => {\r\n  const [data, setData] = useState(null);\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(API_URL)\r\n      .then(response => response.json())\r\n      .then(jsonData => setData(jsonData));\r\n  }, []);\r\n\r\n  const handleClick = (node) => {\r\n    setSelectedNode(node);\r\n  };\r\n\r\n  const renderTree = (nodes, level = 0) => {\r\n    return nodes.map((node) => {\r\n      const { id, name, children } = node;\r\n      const padding = level * 20;\r\n      return (\r\n        <div key={id} className={`node ${selectedNode === node ? 'selected' : ''}`} onClick={() => handleClick(node)}>\r\n          <div className=\"node-content\" style={{ paddingLeft: padding }}>\r\n            {name}\r\n          </div>\r\n          {children && <div className=\"children\">{renderTree(children, level + 1)}</div>}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"if-else-tree\">\r\n      {data ? (\r\n        <>\r\n          <div className=\"tree\">{renderTree(data)}</div>\r\n          <div className=\"code\">\r\n            {selectedNode && (\r\n              <pre>\r\n                if ({selectedNode.condition}) {'{\\n'}\r\n                {'  '}{selectedNode.trueBranch}{'\\n'}\r\n                {'}'} {'else {'} {'\\n'}\r\n                {'  '}{selectedNode.falseBranch}{'\\n'}\r\n                {'}'}\r\n              </pre>\r\n            )}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div>Loading...</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IfElseTree;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAAA;AAEnD,MAAMC,OAAO,GAAG,oCAAoC;AAEpD,MAAMC,UAAU,GAAG,MAAM;EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACdO,KAAK,CAACN,OAAO,CAAC,CACXO,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,QAAQ,IAAIP,OAAO,CAACO,QAAQ,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAIC,IAAI,IAAK;IAC5BP,eAAe,CAACO,IAAI,CAAC;EACvB,CAAC;EAED,MAAMC,UAAU,GAAG,UAACC,KAAK,EAAgB;IAAA,IAAdC,KAAK,uEAAG,CAAC;IAClC,OAAOD,KAAK,CAACE,GAAG,CAAEJ,IAAI,IAAK;MACzB,MAAM;QAAEK,EAAE;QAAEC,IAAI;QAAEC;MAAS,CAAC,GAAGP,IAAI;MACnC,MAAMQ,OAAO,GAAGL,KAAK,GAAG,EAAE;MAC1B,oBACE;QAAc,SAAS,EAAG,QAAOX,YAAY,KAAKQ,IAAI,GAAG,UAAU,GAAG,EAAG,EAAE;QAAC,OAAO,EAAE,MAAMD,WAAW,CAACC,IAAI,CAAE;QAAA,wBAC3G;UAAK,SAAS,EAAC,cAAc;UAAC,KAAK,EAAE;YAAES,WAAW,EAAED;UAAQ,CAAE;UAAA,UAC3DF;QAAI;UAAA;UAAA;UAAA;QAAA,SACD,EACLC,QAAQ,iBAAI;UAAK,SAAS,EAAC,UAAU;UAAA,UAAEN,UAAU,CAACM,QAAQ,EAAEJ,KAAK,GAAG,CAAC;QAAC;UAAA;UAAA;UAAA;QAAA,SAAO;MAAA,GAJtEE,EAAE;QAAA;QAAA;QAAA;MAAA,SAKN;IAEV,CAAC,CAAC;EACJ,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,cAAc;IAAA,UAC1Bf,IAAI,gBACH;MAAA,wBACE;QAAK,SAAS,EAAC,MAAM;QAAA,UAAEW,UAAU,CAACX,IAAI;MAAC;QAAA;QAAA;QAAA;MAAA,QAAO,eAC9C;QAAK,SAAS,EAAC,MAAM;QAAA,UAClBE,YAAY,iBACX;UAAA,WAAK,MACC,EAACA,YAAY,CAACkB,SAAS,EAAC,IAAE,EAAC,KAAK,EACnC,IAAI,EAAElB,YAAY,CAACmB,UAAU,EAAE,IAAI,EACnC,GAAG,EAAC,GAAC,EAAC,QAAQ,EAAC,GAAC,EAAC,IAAI,EACrB,IAAI,EAAEnB,YAAY,CAACoB,WAAW,EAAE,IAAI,EACpC,GAAG;QAAA;UAAA;UAAA;UAAA;QAAA;MAEP;QAAA;QAAA;QAAA;MAAA,QACG;IAAA,gBACL,gBAEH;MAAA,UAAK;IAAU;MAAA;MAAA;MAAA;IAAA;EAChB;IAAA;IAAA;IAAA;EAAA,QACG;AAEV,CAAC;AAAC,GAnDIvB,UAAU;AAAA,KAAVA,UAAU;AAqDhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}