{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barun\\\\OneDrive\\\\Documents\\\\btp\\\\chatbot\\\\client\\\\src\\\\flowtree.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './flowtree.css';\n// const API_URL = \"http://localhost:5001/fetchalldata\";\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faFolder, faFolderOpen } from \"@fortawesome/free-solid-svg-icons\";\n// // import \"./TreeNode.css\";\n\n// function TreeNode({ data }) {\n//   const [isOpen, setIsOpen] = useState(false);\n\n//   const toggle = () => {\n//     setIsOpen(!isOpen);\n//   };\n\n//   const hasChildren = data.children && data.children.length > 0;\n\n//   return (\n//     <li className=\"tree-node\">\n//       <div className=\"tree-node__content\">\n//         {hasChildren && (\n//           <FontAwesomeIcon\n//             icon={isOpen ? faFolderOpen : faFolder}\n//             className=\"tree-node__toggle\"\n//             onClick={toggle}\n//           />\n//         )}\n//         <span className=\"tree-node__label\">{data.name}</span>\n//         {data.value && (\n//           <span className=\"tree-node__value\">({data.value})</span>\n//         )}\n//       </div>\n//       {hasChildren && isOpen && (\n//         <ul className=\"tree-node__children\">\n//           {data.children.map((child) => (\n//             <TreeNode key={child.name} data={child} />\n//           ))}\n//         </ul>\n//       )}\n//     </li>\n//   );\n// }\n\n// export default TreeNode;\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./flowtree.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeView = () => {\n  _s();\n  const [jsonData, setJsonData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\"http://localhost:5001/fetchalldata\");\n      setJsonData(result.data);\n    };\n    fetchData();\n  }, []);\n  const handleToggle = e => {\n    e.stopPropagation();\n    e.target.parentNode.querySelector(\".nested\").classList.toggle(\"active\");\n    e.target.classList.toggle(\"caret-down\");\n  };\n  const handleCollapse = e => {\n    e.stopPropagation();\n    e.target.parentNode.parentNode.parentNode.querySelector(\".nested\").classList.toggle(\"active\");\n    e.target.parentNode.parentNode.parentNode.querySelector(\".caret\").classList.toggle(\"caret-down\");\n  };\n  const renderTree = data => {\n    const isArray = Array.isArray(data);\n    const isObject = typeof data === \"object\" && !isArray && data !== null;\n    if (isObject) {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"tree\",\n        children: Object.keys(data).map(key => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `caret${isArray ? \" array\" : \"\"}`,\n              onClick: handleToggle,\n              children: isArray ? \"\" : `${key}: `\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this), isArray ? \"\" : `${key}: `, renderTree(data[key]), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"collapse\",\n              onClick: handleCollapse,\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this);\n    }\n    if (isArray) {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"nested\",\n        children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: renderTree(item)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: JSON.stringify(data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderTree(jsonData)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeView, \"hdEqB9jCpKbc/mbN0kK7WbAl3+o=\");\n_c = TreeView;\nexport default TreeView;\nvar _c;\n$RefreshReg$(_c, \"TreeView\");","map":{"version":3,"names":["React","useEffect","useState","TreeView","jsonData","setJsonData","fetchData","result","axios","data","handleToggle","e","stopPropagation","target","parentNode","querySelector","classList","toggle","handleCollapse","renderTree","isArray","Array","isObject","Object","keys","map","key","item","index","JSON","stringify"],"sources":["C:/Users/barun/OneDrive/Documents/btp/chatbot/client/src/flowtree.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './flowtree.css';\r\n// const API_URL = \"http://localhost:5001/fetchalldata\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faFolder, faFolderOpen } from \"@fortawesome/free-solid-svg-icons\";\r\n// // import \"./TreeNode.css\";\r\n\r\n// function TreeNode({ data }) {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n\r\n//   const toggle = () => {\r\n//     setIsOpen(!isOpen);\r\n//   };\r\n\r\n//   const hasChildren = data.children && data.children.length > 0;\r\n\r\n//   return (\r\n//     <li className=\"tree-node\">\r\n//       <div className=\"tree-node__content\">\r\n//         {hasChildren && (\r\n//           <FontAwesomeIcon\r\n//             icon={isOpen ? faFolderOpen : faFolder}\r\n//             className=\"tree-node__toggle\"\r\n//             onClick={toggle}\r\n//           />\r\n//         )}\r\n//         <span className=\"tree-node__label\">{data.name}</span>\r\n//         {data.value && (\r\n//           <span className=\"tree-node__value\">({data.value})</span>\r\n//         )}\r\n//       </div>\r\n//       {hasChildren && isOpen && (\r\n//         <ul className=\"tree-node__children\">\r\n//           {data.children.map((child) => (\r\n//             <TreeNode key={child.name} data={child} />\r\n//           ))}\r\n//         </ul>\r\n//       )}\r\n//     </li>\r\n//   );\r\n// }\r\n\r\n// export default TreeNode;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./flowtree.css\";\r\n\r\nconst TreeView = () => {\r\n  const [jsonData, setJsonData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(\r\n        \"http://localhost:5001/fetchalldata\"\r\n      );\r\n      setJsonData(result.data);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleToggle = (e) => {\r\n    e.stopPropagation();\r\n    e.target.parentNode.querySelector(\".nested\").classList.toggle(\"active\");\r\n    e.target.classList.toggle(\"caret-down\");\r\n  };\r\n\r\n  const handleCollapse = (e) => {\r\n    e.stopPropagation();\r\n    e.target.parentNode.parentNode.parentNode\r\n      .querySelector(\".nested\")\r\n      .classList.toggle(\"active\");\r\n    e.target.parentNode.parentNode.parentNode\r\n      .querySelector(\".caret\")\r\n      .classList.toggle(\"caret-down\");\r\n  };\r\n\r\n  const renderTree = (data) => {\r\n    const isArray = Array.isArray(data);\r\n    const isObject = typeof data === \"object\" && !isArray && data !== null;\r\n\r\n    if (isObject) {\r\n      return (\r\n        <ul className=\"tree\">\r\n          {Object.keys(data).map((key) => (\r\n            <li key={key}>\r\n              <div className=\"item\">\r\n                <span\r\n                  className={`caret${isArray ? \" array\" : \"\"}`}\r\n                  onClick={handleToggle}\r\n                >\r\n                  {isArray ? \"\" : `${key}: `}\r\n                </span>\r\n                {isArray ? \"\" : `${key}: `}\r\n                {renderTree(data[key])}\r\n                <button className=\"collapse\" onClick={handleCollapse}>\r\n                  -\r\n                </button>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n\r\n    if (isArray) {\r\n      return (\r\n        <ul className=\"nested\">\r\n          {data.map((item, index) => (\r\n            <li key={index}>{renderTree(item)}</li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n\r\n    return <span>{JSON.stringify(data)}</span>;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {renderTree(jsonData)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeView;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}